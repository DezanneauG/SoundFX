
Prise_en_main_DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e2c  08005e2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000000c  08005e40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08005e40  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffc1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002233  00000000  00000000  0002fffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  00032230  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e90  00000000  00000000  000331b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021bde  00000000  00000000  00034040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbcd  00000000  00000000  00055c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccb7c  00000000  00000000  000627eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  0012f3e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a1c 	.word	0x08005a1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005a1c 	.word	0x08005a1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <write_register>:

//(1): Functions definitions
//-------------- Static Functions ---------------//
// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 80004d4:	4a09      	ldr	r2, [pc, #36]	; (80004fc <write_register+0x34>)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	7013      	strb	r3, [r2, #0]
	iData[1] = data[0];
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	781a      	ldrb	r2, [r3, #0]
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <write_register+0x34>)
 80004e0:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2302      	movs	r3, #2
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <write_register+0x34>)
 80004ea:	2194      	movs	r1, #148	; 0x94
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <write_register+0x38>)
 80004ee:	f001 ff8d 	bl	800240c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000028 	.word	0x20000028
 8000500:	2000002c 	.word	0x2000002c

08000504 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af02      	add	r7, sp, #8
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
	iData[0] = reg;
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <read_register+0x3c>)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000516:	2364      	movs	r3, #100	; 0x64
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <read_register+0x3c>)
 800051e:	2194      	movs	r1, #148	; 0x94
 8000520:	4808      	ldr	r0, [pc, #32]	; (8000544 <read_register+0x40>)
 8000522:	f001 ff73 	bl	800240c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 8000526:	2364      	movs	r3, #100	; 0x64
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2301      	movs	r3, #1
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	2194      	movs	r1, #148	; 0x94
 8000530:	4804      	ldr	r0, [pc, #16]	; (8000544 <read_register+0x40>)
 8000532:	f002 f869 	bl	8002608 <HAL_I2C_Master_Receive>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028
 8000544:	2000002c 	.word	0x2000002c

08000548 <CS43_Init>:
//-------------- Public Functions ----------------//

// Function(1): Initialisation

void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000548:	b084      	sub	sp, #16
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
 800054e:	f107 0c08 	add.w	ip, r7, #8
 8000552:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000556:	4b81      	ldr	r3, [pc, #516]	; (800075c <CS43_Init+0x214>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800055e:	4b7f      	ldr	r3, [pc, #508]	; (800075c <CS43_Init+0x214>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	69da      	ldr	r2, [r3, #28]
 8000564:	4b7d      	ldr	r3, [pc, #500]	; (800075c <CS43_Init+0x214>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056c:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2110      	movs	r1, #16
 8000572:	487b      	ldr	r0, [pc, #492]	; (8000760 <CS43_Init+0x218>)
 8000574:	f001 fdf8 	bl	8002168 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000578:	4b7a      	ldr	r3, [pc, #488]	; (8000764 <CS43_Init+0x21c>)
 800057a:	4618      	mov	r0, r3
 800057c:	f107 0108 	add.w	r1, r7, #8
 8000580:	2354      	movs	r3, #84	; 0x54
 8000582:	461a      	mov	r2, r3
 8000584:	f004 fcea 	bl	8004f5c <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000588:	4b77      	ldr	r3, [pc, #476]	; (8000768 <CS43_Init+0x220>)
 800058a:	2201      	movs	r2, #1
 800058c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,iData);
 800058e:	4976      	ldr	r1, [pc, #472]	; (8000768 <CS43_Init+0x220>)
 8000590:	2002      	movs	r0, #2
 8000592:	f7ff ff99 	bl	80004c8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000596:	4b74      	ldr	r3, [pc, #464]	; (8000768 <CS43_Init+0x220>)
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	705a      	strb	r2, [r3, #1]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800059c:	4b72      	ldr	r3, [pc, #456]	; (8000768 <CS43_Init+0x220>)
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b70      	ldr	r3, [pc, #448]	; (8000768 <CS43_Init+0x220>)
 80005a8:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005aa:	4b6f      	ldr	r3, [pc, #444]	; (8000768 <CS43_Init+0x220>)
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	f043 030c 	orr.w	r3, r3, #12
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b6c      	ldr	r3, [pc, #432]	; (8000768 <CS43_Init+0x220>)
 80005b6:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b8:	4b6b      	ldr	r3, [pc, #428]	; (8000768 <CS43_Init+0x220>)
 80005ba:	785b      	ldrb	r3, [r3, #1]
 80005bc:	f043 0303 	orr.w	r3, r3, #3
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	4b69      	ldr	r3, [pc, #420]	; (8000768 <CS43_Init+0x220>)
 80005c4:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 80005c6:	4969      	ldr	r1, [pc, #420]	; (800076c <CS43_Init+0x224>)
 80005c8:	2004      	movs	r0, #4
 80005ca:	f7ff ff7d 	bl	80004c8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ce:	4b66      	ldr	r3, [pc, #408]	; (8000768 <CS43_Init+0x220>)
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	705a      	strb	r2, [r3, #1]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005d4:	4965      	ldr	r1, [pc, #404]	; (800076c <CS43_Init+0x224>)
 80005d6:	2005      	movs	r0, #5
 80005d8:	f7ff ff76 	bl	80004c8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005dc:	4962      	ldr	r1, [pc, #392]	; (8000768 <CS43_Init+0x220>)
 80005de:	2006      	movs	r0, #6
 80005e0:	f7ff ff90 	bl	8000504 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005e4:	4b60      	ldr	r3, [pc, #384]	; (8000768 <CS43_Init+0x220>)
 80005e6:	785b      	ldrb	r3, [r3, #1]
 80005e8:	f003 0320 	and.w	r3, r3, #32
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b5e      	ldr	r3, [pc, #376]	; (8000768 <CS43_Init+0x220>)
 80005f0:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 7);  // Slave
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <CS43_Init+0x220>)
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <CS43_Init+0x220>)
 80005fe:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 8000600:	4b59      	ldr	r3, [pc, #356]	; (8000768 <CS43_Init+0x220>)
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b57      	ldr	r3, [pc, #348]	; (8000768 <CS43_Init+0x220>)
 800060c:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 4);  // No DSP mode
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <CS43_Init+0x220>)
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	f023 0310 	bic.w	r3, r3, #16
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b53      	ldr	r3, [pc, #332]	; (8000768 <CS43_Init+0x220>)
 800061a:	705a      	strb	r2, [r3, #1]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 800061c:	4b52      	ldr	r3, [pc, #328]	; (8000768 <CS43_Init+0x220>)
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	f023 0304 	bic.w	r3, r3, #4
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b50      	ldr	r3, [pc, #320]	; (8000768 <CS43_Init+0x220>)
 8000628:	705a      	strb	r2, [r3, #1]
	iData[1] |= (1 << 2);
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <CS43_Init+0x220>)
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	f043 0304 	orr.w	r3, r3, #4
 8000632:	b2da      	uxtb	r2, r3
 8000634:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <CS43_Init+0x220>)
 8000636:	705a      	strb	r2, [r3, #1]

	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000638:	4b4b      	ldr	r3, [pc, #300]	; (8000768 <CS43_Init+0x220>)
 800063a:	785b      	ldrb	r3, [r3, #1]
 800063c:	f043 0303 	orr.w	r3, r3, #3
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b49      	ldr	r3, [pc, #292]	; (8000768 <CS43_Init+0x220>)
 8000644:	705a      	strb	r2, [r3, #1]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000646:	4949      	ldr	r1, [pc, #292]	; (800076c <CS43_Init+0x224>)
 8000648:	2006      	movs	r0, #6
 800064a:	f7ff ff3d 	bl	80004c8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 800064e:	4947      	ldr	r1, [pc, #284]	; (800076c <CS43_Init+0x224>)
 8000650:	2008      	movs	r0, #8
 8000652:	f7ff ff57 	bl	8000504 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000656:	4b44      	ldr	r3, [pc, #272]	; (8000768 <CS43_Init+0x220>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	f023 030f 	bic.w	r3, r3, #15
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b41      	ldr	r3, [pc, #260]	; (8000768 <CS43_Init+0x220>)
 8000662:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000664:	4b40      	ldr	r3, [pc, #256]	; (8000768 <CS43_Init+0x220>)
 8000666:	785b      	ldrb	r3, [r3, #1]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <CS43_Init+0x220>)
 8000670:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000672:	493e      	ldr	r1, [pc, #248]	; (800076c <CS43_Init+0x224>)
 8000674:	2008      	movs	r0, #8
 8000676:	f7ff ff27 	bl	80004c8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800067a:	493c      	ldr	r1, [pc, #240]	; (800076c <CS43_Init+0x224>)
 800067c:	2009      	movs	r0, #9
 800067e:	f7ff ff41 	bl	8000504 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000682:	4b39      	ldr	r3, [pc, #228]	; (8000768 <CS43_Init+0x220>)
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	f023 030f 	bic.w	r3, r3, #15
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b36      	ldr	r3, [pc, #216]	; (8000768 <CS43_Init+0x220>)
 800068e:	705a      	strb	r2, [r3, #1]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000690:	4b35      	ldr	r3, [pc, #212]	; (8000768 <CS43_Init+0x220>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <CS43_Init+0x220>)
 800069c:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_B,&iData[1]);
 800069e:	4933      	ldr	r1, [pc, #204]	; (800076c <CS43_Init+0x224>)
 80006a0:	2009      	movs	r0, #9
 80006a2:	f7ff ff11 	bl	80004c8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 80006a6:	4931      	ldr	r1, [pc, #196]	; (800076c <CS43_Init+0x224>)
 80006a8:	200e      	movs	r0, #14
 80006aa:	f7ff ff2b 	bl	8000504 <read_register>
	if(outputMode == MODE_ANALOG)
 80006ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d123      	bne.n	80006fe <CS43_Init+0x1b6>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <CS43_Init+0x220>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <CS43_Init+0x220>)
 80006c2:	705a      	strb	r2, [r3, #1]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006c4:	4b28      	ldr	r3, [pc, #160]	; (8000768 <CS43_Init+0x220>)
 80006c6:	785b      	ldrb	r3, [r3, #1]
 80006c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b26      	ldr	r3, [pc, #152]	; (8000768 <CS43_Init+0x220>)
 80006d0:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <CS43_Init+0x220>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	f023 0320 	bic.w	r3, r3, #32
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <CS43_Init+0x220>)
 80006de:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006e0:	4b21      	ldr	r3, [pc, #132]	; (8000768 <CS43_Init+0x220>)
 80006e2:	785b      	ldrb	r3, [r3, #1]
 80006e4:	f023 0310 	bic.w	r3, r3, #16
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <CS43_Init+0x220>)
 80006ec:	705a      	strb	r2, [r3, #1]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <CS43_Init+0x220>)
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	f023 0308 	bic.w	r3, r3, #8
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <CS43_Init+0x220>)
 80006fa:	705a      	strb	r2, [r3, #1]
 80006fc:	e006      	b.n	800070c <CS43_Init+0x1c4>
	}
	else if(outputMode == MODE_I2S)
 80006fe:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000702:	2b00      	cmp	r3, #0
 8000704:	d102      	bne.n	800070c <CS43_Init+0x1c4>
	{
		iData[1] = 0x02;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <CS43_Init+0x220>)
 8000708:	2202      	movs	r2, #2
 800070a:	705a      	strb	r2, [r3, #1]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800070c:	4917      	ldr	r1, [pc, #92]	; (800076c <CS43_Init+0x224>)
 800070e:	200e      	movs	r0, #14
 8000710:	f7ff feda 	bl	80004c8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 8000714:	4915      	ldr	r1, [pc, #84]	; (800076c <CS43_Init+0x224>)
 8000716:	200f      	movs	r0, #15
 8000718:	f7ff fef4 	bl	8000504 <read_register>
	iData[1] = 0x00;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <CS43_Init+0x220>)
 800071e:	2200      	movs	r2, #0
 8000720:	705a      	strb	r2, [r3, #1]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 8000722:	4912      	ldr	r1, [pc, #72]	; (800076c <CS43_Init+0x224>)
 8000724:	200f      	movs	r0, #15
 8000726:	f7ff fecf 	bl	80004c8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0x00;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <CS43_Init+0x220>)
 800072c:	2200      	movs	r2, #0
 800072e:	705a      	strb	r2, [r3, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <CS43_Init+0x224>)
 8000732:	2014      	movs	r0, #20
 8000734:	f7ff fec8 	bl	80004c8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000738:	490c      	ldr	r1, [pc, #48]	; (800076c <CS43_Init+0x224>)
 800073a:	2015      	movs	r0, #21
 800073c:	f7ff fec4 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000740:	490a      	ldr	r1, [pc, #40]	; (800076c <CS43_Init+0x224>)
 8000742:	201a      	movs	r0, #26
 8000744:	f7ff fec0 	bl	80004c8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000748:	4908      	ldr	r1, [pc, #32]	; (800076c <CS43_Init+0x224>)
 800074a:	201b      	movs	r0, #27
 800074c:	f7ff febc 	bl	80004c8 <write_register>
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000758:	b004      	add	sp, #16
 800075a:	4770      	bx	lr
 800075c:	200001a0 	.word	0x200001a0
 8000760:	40020c00 	.word	0x40020c00
 8000764:	2000002c 	.word	0x2000002c
 8000768:	20000028 	.word	0x20000028
 800076c:	20000029 	.word	0x20000029

08000770 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
	switch (side)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b03      	cmp	r3, #3
 800077e:	d837      	bhi.n	80007f0 <CS43_Enable_RightLeft+0x80>
 8000780:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <CS43_Enable_RightLeft+0x18>)
 8000782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000786:	bf00      	nop
 8000788:	08000799 	.word	0x08000799
 800078c:	080007af 	.word	0x080007af
 8000790:	080007c5 	.word	0x080007c5
 8000794:	080007db 	.word	0x080007db
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 800079a:	22c0      	movs	r2, #192	; 0xc0
 800079c:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800079e:	4b20      	ldr	r3, [pc, #128]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007a0:	785b      	ldrb	r3, [r3, #1]
 80007a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007aa:	705a      	strb	r2, [r3, #1]
			break;
 80007ac:	e021      	b.n	80007f2 <CS43_Enable_RightLeft+0x82>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	705a      	strb	r2, [r3, #1]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007b4:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007c0:	705a      	strb	r2, [r3, #1]
			break;
 80007c2:	e016      	b.n	80007f2 <CS43_Enable_RightLeft+0x82>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007c6:	22c0      	movs	r2, #192	; 0xc0
 80007c8:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007cc:	785b      	ldrb	r3, [r3, #1]
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007d6:	705a      	strb	r2, [r3, #1]
			break;
 80007d8:	e00b      	b.n	80007f2 <CS43_Enable_RightLeft+0x82>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	705a      	strb	r2, [r3, #1]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007e2:	785b      	ldrb	r3, [r3, #1]
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007ec:	705a      	strb	r2, [r3, #1]
			break;
 80007ee:	e000      	b.n	80007f2 <CS43_Enable_RightLeft+0x82>
		default:
			break;
 80007f0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	f043 030c 	orr.w	r3, r3, #12
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 80007fe:	705a      	strb	r2, [r3, #1]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 8000802:	785b      	ldrb	r3, [r3, #1]
 8000804:	f043 0303 	orr.w	r3, r3, #3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <CS43_Enable_RightLeft+0xb0>)
 800080c:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL2,&iData[1]);
 800080e:	4905      	ldr	r1, [pc, #20]	; (8000824 <CS43_Enable_RightLeft+0xb4>)
 8000810:	2004      	movs	r0, #4
 8000812:	f7ff fe59 	bl	80004c8 <write_register>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000028 	.word	0x20000028
 8000824:	20000029 	.word	0x20000029

08000828 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	int8_t tempVol = volume - 50;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	3b32      	subs	r3, #50	; 0x32
 8000836:	b2db      	uxtb	r3, r3
 8000838:	73fb      	strb	r3, [r7, #15]
	tempVol = tempVol*(127/50);
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	73fb      	strb	r3, [r7, #15]
	uint8_t myVolume =  (uint8_t )tempVol;
 8000842:	7bfb      	ldrb	r3, [r7, #15]
 8000844:	73bb      	strb	r3, [r7, #14]
	iData[1] = myVolume;
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <CS43_SetVolume+0x78>)
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	7053      	strb	r3, [r2, #1]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800084c:	4915      	ldr	r1, [pc, #84]	; (80008a4 <CS43_SetVolume+0x7c>)
 800084e:	2014      	movs	r0, #20
 8000850:	f7ff fe3a 	bl	80004c8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000854:	4913      	ldr	r1, [pc, #76]	; (80008a4 <CS43_SetVolume+0x7c>)
 8000856:	2015      	movs	r0, #21
 8000858:	f7ff fe36 	bl	80004c8 <write_register>

	iData[1] = VOLUME_CONVERT_D(volume);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	2b64      	cmp	r3, #100	; 0x64
 8000860:	d80e      	bhi.n	8000880 <CS43_SetVolume+0x58>
 8000862:	79fa      	ldrb	r2, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	011b      	lsls	r3, r3, #4
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <CS43_SetVolume+0x80>)
 800086e:	fb82 1203 	smull	r1, r2, r2, r3
 8000872:	1152      	asrs	r2, r2, #5
 8000874:	17db      	asrs	r3, r3, #31
 8000876:	1ad3      	subs	r3, r2, r3
 8000878:	b2db      	uxtb	r3, r3
 800087a:	3b18      	subs	r3, #24
 800087c:	b2db      	uxtb	r3, r3
 800087e:	e000      	b.n	8000882 <CS43_SetVolume+0x5a>
 8000880:	2318      	movs	r3, #24
 8000882:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <CS43_SetVolume+0x78>)
 8000884:	7053      	strb	r3, [r2, #1]

	/* Set the Master volume */
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 8000886:	4907      	ldr	r1, [pc, #28]	; (80008a4 <CS43_SetVolume+0x7c>)
 8000888:	2020      	movs	r0, #32
 800088a:	f7ff fe1d 	bl	80004c8 <write_register>
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800088e:	4905      	ldr	r1, [pc, #20]	; (80008a4 <CS43_SetVolume+0x7c>)
 8000890:	2021      	movs	r0, #33	; 0x21
 8000892:	f7ff fe19 	bl	80004c8 <write_register>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000028 	.word	0x20000028
 80008a4:	20000029 	.word	0x20000029
 80008a8:	51eb851f 	.word	0x51eb851f

080008ac <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <CS43_Start+0x7c>)
 80008b2:	2299      	movs	r2, #153	; 0x99
 80008b4:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 80008b6:	491d      	ldr	r1, [pc, #116]	; (800092c <CS43_Start+0x80>)
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff fe05 	bl	80004c8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <CS43_Start+0x7c>)
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_47,&iData[1]);
 80008c4:	4919      	ldr	r1, [pc, #100]	; (800092c <CS43_Start+0x80>)
 80008c6:	2047      	movs	r0, #71	; 0x47
 80008c8:	f7ff fdfe 	bl	80004c8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008cc:	4917      	ldr	r1, [pc, #92]	; (800092c <CS43_Start+0x80>)
 80008ce:	2032      	movs	r0, #50	; 0x32
 80008d0:	f7ff fe18 	bl	8000504 <read_register>
	iData[1] |= 0x80;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <CS43_Start+0x7c>)
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <CS43_Start+0x7c>)
 80008e0:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 80008e2:	4912      	ldr	r1, [pc, #72]	; (800092c <CS43_Start+0x80>)
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f7ff fdef 	bl	80004c8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008ea:	4910      	ldr	r1, [pc, #64]	; (800092c <CS43_Start+0x80>)
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f7ff fe09 	bl	8000504 <read_register>
	iData[1] &= ~(0x80);
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <CS43_Start+0x7c>)
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <CS43_Start+0x7c>)
 80008fe:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_32,&iData[1]);
 8000900:	490a      	ldr	r1, [pc, #40]	; (800092c <CS43_Start+0x80>)
 8000902:	2032      	movs	r0, #50	; 0x32
 8000904:	f7ff fde0 	bl	80004c8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <CS43_Start+0x7c>)
 800090a:	2200      	movs	r2, #0
 800090c:	705a      	strb	r2, [r3, #1]
	write_register(CONFIG_00,&iData[1]);
 800090e:	4907      	ldr	r1, [pc, #28]	; (800092c <CS43_Start+0x80>)
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fdd9 	bl	80004c8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <CS43_Start+0x7c>)
 8000918:	229e      	movs	r2, #158	; 0x9e
 800091a:	705a      	strb	r2, [r3, #1]
	write_register(POWER_CONTROL1,&iData[1]);
 800091c:	4903      	ldr	r1, [pc, #12]	; (800092c <CS43_Start+0x80>)
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff fdd2 	bl	80004c8 <write_register>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000028 	.word	0x20000028
 800092c:	20000029 	.word	0x20000029

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b093      	sub	sp, #76	; 0x4c
 8000934:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */

	sample_dt = F_OUT/F_SAMPLE;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <main+0x78>)
 8000938:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <main+0x7c>)
 800093a:	601a      	str	r2, [r3, #0]
	sample_N = F_SAMPLE/F_OUT;
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <main+0x80>)
 800093e:	2232      	movs	r2, #50	; 0x32
 8000940:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f000 fc8b 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f83f 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 f9af 	bl	8000cac <MX_GPIO_Init>
  MX_DMA_Init();
 800094e:	f000 f98d 	bl	8000c6c <MX_DMA_Init>
  MX_DAC_Init();
 8000952:	f000 f8b9 	bl	8000ac8 <MX_DAC_Init>
  MX_I2C1_Init();
 8000956:	f000 f8e1 	bl	8000b1c <MX_I2C1_Init>
  MX_I2S3_Init();
 800095a:	f000 f90d 	bl	8000b78 <MX_I2S3_Init>
  MX_TIM2_Init();
 800095e:	f000 f939 	bl	8000bd4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* 			INITIALISATION CS43L22				*/

  CS43_Init(hi2c1, MODE_ANALOG); 				// configuration des registres du composant CS43L22 	: 	select mode ANALOG
 8000962:	4c14      	ldr	r4, [pc, #80]	; (80009b4 <main+0x84>)
 8000964:	2301      	movs	r3, #1
 8000966:	9311      	str	r3, [sp, #68]	; 0x44
 8000968:	4668      	mov	r0, sp
 800096a:	f104 0310 	add.w	r3, r4, #16
 800096e:	2244      	movs	r2, #68	; 0x44
 8000970:	4619      	mov	r1, r3
 8000972:	f004 faf3 	bl	8004f5c <memcpy>
 8000976:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800097a:	f7ff fde5 	bl	8000548 <CS43_Init>
  CS43_SetVolume(50);							// configuration des registres du composant CS43L22 	: 	choose Volume level
 800097e:	2032      	movs	r0, #50	; 0x32
 8000980:	f7ff ff52 	bl	8000828 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);		// configuration des registres du composant CS43L22 	: 	choose Audio mode == stereo
 8000984:	2003      	movs	r0, #3
 8000986:	f7ff fef3 	bl	8000770 <CS43_Enable_RightLeft>
  CS43_Start();
 800098a:	f7ff ff8f 	bl	80008ac <CS43_Start>

  /* 			INITIALISATION I2S STM32				*/

  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)I2S_dummy, 4);
 800098e:	2204      	movs	r2, #4
 8000990:	4909      	ldr	r1, [pc, #36]	; (80009b8 <main+0x88>)
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <main+0x8c>)
 8000994:	f002 fccc 	bl	8003330 <HAL_I2S_Transmit_DMA>

  /* 			INITIALISATION DAC STM32				*/

  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);			// Start DAC	:	Select DAC_CHANNEL_1
 8000998:	2100      	movs	r1, #0
 800099a:	4809      	ldr	r0, [pc, #36]	; (80009c0 <main+0x90>)
 800099c:	f000 fe03 	bl	80015a6 <HAL_DAC_Start>

  /* 			INITIALISATION TIM2				*/

  HAL_TIM_Base_Start_IT(&htim2);		// Start DAC	:	Select DAC_CHANNEL_1
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <main+0x94>)
 80009a2:	f003 fee2 	bl	800476a <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80009a6:	e7fe      	b.n	80009a6 <main+0x76>
 80009a8:	2000019c 	.word	0x2000019c
 80009ac:	3ca3d70a 	.word	0x3ca3d70a
 80009b0:	20000084 	.word	0x20000084
 80009b4:	20000088 	.word	0x20000088
 80009b8:	2000013c 	.word	0x2000013c
 80009bc:	200001a0 	.word	0x200001a0
 80009c0:	20000144 	.word	0x20000144
 80009c4:	2000015c 	.word	0x2000015c

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b098      	sub	sp, #96	; 0x60
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d2:	2230      	movs	r2, #48	; 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 facb 	bl	8004f72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <SystemClock_Config+0xf8>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <SystemClock_Config+0xf8>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <SystemClock_Config+0xf8>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <SystemClock_Config+0xfc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <SystemClock_Config+0xfc>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <SystemClock_Config+0xfc>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a32:	2301      	movs	r3, #1
 8000a34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a46:	2304      	movs	r3, #4
 8000a48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a4a:	23a8      	movs	r3, #168	; 0xa8
 8000a4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 f8ce 	bl	8003bfc <HAL_RCC_OscConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a66:	f000 f9ed 	bl	8000e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2105      	movs	r1, #5
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 fb27 	bl	80040dc <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a94:	f000 f9d6 	bl	8000e44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000a9c:	2332      	movs	r3, #50	; 0x32
 8000a9e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 fcf5 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000ab4:	f000 f9c6 	bl	8000e44 <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3760      	adds	r7, #96	; 0x60
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_DAC_Init+0x4c>)
 8000ad8:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <MX_DAC_Init+0x50>)
 8000ada:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_DAC_Init+0x4c>)
 8000ade:	f000 fd40 	bl	8001562 <HAL_DAC_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ae8:	f000 f9ac 	bl	8000e44 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_DAC_Init+0x4c>)
 8000afc:	f000 fdb9 	bl	8001672 <HAL_DAC_ConfigChannel>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b06:	f000 f99d 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000144 	.word	0x20000144
 8000b18:	40007400 	.word	0x40007400

08000b1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <MX_I2C1_Init+0x54>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b28:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <MX_I2C1_Init+0x58>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_I2C1_Init+0x50>)
 8000b5a:	f001 fb1f 	bl	800219c <HAL_I2C_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b64:	f000 f96e 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000088 	.word	0x20000088
 8000b70:	40005400 	.word	0x40005400
 8000b74:	000186a0 	.word	0x000186a0

08000b78 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <MX_I2S3_Init+0x58>)
 8000b80:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b88:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b9c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000ba0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ba4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_I2S3_Init+0x54>)
 8000bba:	f002 fa79 	bl	80030b0 <HAL_I2S_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000bc4:	f000 f93e 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200001a0 	.word	0x200001a0
 8000bd0:	40003c00 	.word	0x40003c00

08000bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	463b      	mov	r3, r7
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000bfa:	2253      	movs	r2, #83	; 0x53
 8000bfc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c06:	2213      	movs	r2, #19
 8000c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c16:	4814      	ldr	r0, [pc, #80]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c18:	f003 fd7c 	bl	8004714 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 f90f 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c34:	f003 fec5 	bl	80049c2 <HAL_TIM_ConfigClockSource>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f000 f901 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c42:	2320      	movs	r3, #32
 8000c44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_TIM2_Init+0x94>)
 8000c50:	f004 f8d0 	bl	8004df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000c5a:	f000 f8f3 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000015c 	.word	0x2000015c

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_DMA_Init+0x3c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <MX_DMA_Init+0x3c>)
 8000c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_DMA_Init+0x3c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2010      	movs	r0, #16
 8000c94:	f000 fc2f 	bl	80014f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c98:	2010      	movs	r0, #16
 8000c9a:	f000 fc48 	bl	800152e <HAL_NVIC_EnableIRQ>

}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a2d      	ldr	r2, [pc, #180]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0304 	and.w	r3, r3, #4
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_GPIO_Init+0xd4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <MX_GPIO_Init+0xd8>)
 8000d56:	f001 fa07 	bl	8002168 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000d5a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_GPIO_Init+0xd8>)
 8000d74:	f001 f85e 	bl	8001e34 <HAL_GPIO_Init>

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	; 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020c00 	.word	0x40020c00

08000d88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

	UNUSED(htim);

	// build sine function for the audio sound
	if (htim->Instance == TIM2) {
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d98:	d140      	bne.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x94>

		// fct mathematiques du sinus
		mySineValue = sinf(i_t * 2 * PI * sample_dt);
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000e28 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000dac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dba:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbe:	f004 f8e1 	bl	8004f84 <sinf>
 8000dc2:	eef0 7a40 	vmov.f32	s15, s0
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000dc8:	edc3 7a00 	vstr	s15, [r3]

		// conversion float to decimal
		myDacValue = (mySineValue +1)*127;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000dce:	edd3 7a00 	vldr	s15, [r3]
 8000dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dda:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000e34 <HAL_TIM_PeriodElapsedCallback+0xac>
 8000dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de6:	ee17 3a90 	vmov	r3, s15
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dee:	801a      	strh	r2, [r3, #0]

		//Output the sample to the SIMDAC
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, myDacValue);
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2208      	movs	r2, #8
 8000df6:	2100      	movs	r1, #0
 8000df8:	4810      	ldr	r0, [pc, #64]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000dfa:	f000 fc87 	bl	800170c <HAL_DAC_SetValue>

		i_t++;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e08:	801a      	strh	r2, [r3, #0]
		if (i_t>=sample_N) {	// depassement de la taille du sample echantillonage termine
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d302      	bcc.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x94>
			i_t = 0;
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001e8 	.word	0x200001e8
 8000e28:	40490fd0 	.word	0x40490fd0
 8000e2c:	2000019c 	.word	0x2000019c
 8000e30:	20000080 	.word	0x20000080
 8000e34:	42fe0000 	.word	0x42fe0000
 8000e38:	20000158 	.word	0x20000158
 8000e3c:	20000144 	.word	0x20000144
 8000e40:	20000084 	.word	0x20000084

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <HAL_DAC_MspInit+0x7c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d127      	bne.n	8000f16 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_DAC_MspInit+0x80>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <HAL_DAC_MspInit+0x80>)
 8000ed0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_DAC_MspInit+0x80>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_DAC_MspInit+0x80>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_DAC_MspInit+0x80>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_DAC_MspInit+0x80>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000efe:	2310      	movs	r3, #16
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f02:	2303      	movs	r3, #3
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <HAL_DAC_MspInit+0x84>)
 8000f12:	f000 ff8f 	bl	8001e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40007400 	.word	0x40007400
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000

08000f2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_I2C_MspInit+0x84>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d12c      	bne.n	8000fa8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000f6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f70:	2312      	movs	r3, #18
 8000f72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	4619      	mov	r1, r3
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <HAL_I2C_MspInit+0x8c>)
 8000f88:	f000 ff54 	bl	8001e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_I2C_MspInit+0x88>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020400 	.word	0x40020400

08000fbc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a46      	ldr	r2, [pc, #280]	; (80010f4 <HAL_I2S_MspInit+0x138>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	f040 8085 	bne.w	80010ea <HAL_I2S_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	4b44      	ldr	r3, [pc, #272]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a43      	ldr	r2, [pc, #268]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 8000fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b41      	ldr	r3, [pc, #260]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a3c      	ldr	r2, [pc, #240]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 8001006:	f043 0304 	orr.w	r3, r3, #4
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a35      	ldr	r2, [pc, #212]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6313      	str	r3, [r2, #48]	; 0x30
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_I2S_MspInit+0x13c>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8001034:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001046:	2306      	movs	r3, #6
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	482a      	ldr	r0, [pc, #168]	; (80010fc <HAL_I2S_MspInit+0x140>)
 8001052:	f000 feef 	bl	8001e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001068:	2306      	movs	r3, #6
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4823      	ldr	r0, [pc, #140]	; (8001100 <HAL_I2S_MspInit+0x144>)
 8001074:	f000 fede 	bl	8001e34 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <HAL_I2S_MspInit+0x148>)
 800107a:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_I2S_MspInit+0x14c>)
 800107c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_I2S_MspInit+0x148>)
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <HAL_I2S_MspInit+0x148>)
 8001086:	2240      	movs	r2, #64	; 0x40
 8001088:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <HAL_I2S_MspInit+0x148>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_I2S_MspInit+0x148>)
 8001092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001096:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_I2S_MspInit+0x148>)
 800109a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800109e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ae:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010b8:	2204      	movs	r2, #4
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010bc:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010be:	2203      	movs	r2, #3
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010d0:	f000 fb42 	bl	8001758 <HAL_DMA_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2S_MspInit+0x122>
    {
      Error_Handler();
 80010da:	f7ff feb3 	bl	8000e44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_I2S_MspInit+0x148>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40003c00 	.word	0x40003c00
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020000 	.word	0x40020000
 8001104:	200000dc 	.word	0x200000dc
 8001108:	40026088 	.word	0x40026088

0800110c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800111c:	d115      	bne.n	800114a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_TIM_Base_MspInit+0x48>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_TIM_Base_MspInit+0x48>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_TIM_Base_MspInit+0x48>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	201c      	movs	r0, #28
 8001140:	f000 f9d9 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001144:	201c      	movs	r0, #28
 8001146:	f000 f9f2 	bl	800152e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ac:	f000 f8a8 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <DMA1_Stream5_IRQHandler+0x10>)
 80011ba:	f000 fbd3 	bl	8001964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000dc 	.word	0x200000dc

080011c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <TIM2_IRQHandler+0x10>)
 80011ce:	f003 faf0 	bl	80047b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000015c 	.word	0x2000015c

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <SystemInit+0x28>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <SystemInit+0x28>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SystemInit+0x28>)
 80011f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f6:	609a      	str	r2, [r3, #8]
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800120c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800120e:	e003      	b.n	8001218 <LoopCopyDataInit>

08001210 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001212:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001214:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001216:	3104      	adds	r1, #4

08001218 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800121c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800121e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001220:	d3f6      	bcc.n	8001210 <CopyDataInit>
  ldr  r2, =_sbss
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001224:	e002      	b.n	800122c <LoopFillZerobss>

08001226 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001226:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001228:	f842 3b04 	str.w	r3, [r2], #4

0800122c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800122e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001230:	d3f9      	bcc.n	8001226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001232:	f7ff ffd3 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f003 fe6d 	bl	8004f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fb79 	bl	8000930 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001240:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001244:	08005e34 	.word	0x08005e34
  ldr  r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800124c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001250:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001254:	200001f0 	.word	0x200001f0

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f92b 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fde0 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f943 	bl	800154a <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f000 f90b 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	200001ec 	.word	0x200001ec

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	200001ec 	.word	0x200001ec

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff29 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001508:	f7ff ff3e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 800150c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f7ff ff8e 	bl	8001434 <NVIC_EncodePriority>
 8001518:	4602      	mov	r2, r0
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff5d 	bl	80013e0 <__NVIC_SetPriority>
}
 8001526:	bf00      	nop
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff31 	bl	80013a4 <__NVIC_EnableIRQ>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffa2 	bl	800149c <SysTick_Config>
 8001558:	4603      	mov	r3, r0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e014      	b.n	800159e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	791b      	ldrb	r3, [r3, #4]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d105      	bne.n	800158a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fc8d 	bl	8000ea4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2202      	movs	r2, #2
 800158e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	795b      	ldrb	r3, [r3, #5]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_DAC_Start+0x1e>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e050      	b.n	8001666 <HAL_DAC_Start+0xc0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	409a      	lsls	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d11a      	bne.n	8001620 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001600:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b04      	cmp	r3, #4
 8001606:	d127      	bne.n	8001658 <HAL_DAC_Start+0xb2>
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b38      	cmp	r3, #56	; 0x38
 800160c:	d124      	bne.n	8001658 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0201 	orr.w	r2, r2, #1
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	e01b      	b.n	8001658 <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800162a:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8001636:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800163e:	d10b      	bne.n	8001658 <HAL_DAC_Start+0xb2>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001646:	d107      	bne.n	8001658 <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0202 	orr.w	r2, r2, #2
 8001656:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001672:	b480      	push	{r7}
 8001674:	b087      	sub	sp, #28
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	795b      	ldrb	r3, [r3, #5]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_DAC_ConfigChannel+0x20>
 800168e:	2302      	movs	r3, #2
 8001690:	e036      	b.n	8001700 <HAL_DAC_ConfigChannel+0x8e>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2202      	movs	r2, #2
 800169c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80016a6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4013      	ands	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	22c0      	movs	r2, #192	; 0xc0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43da      	mvns	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	400a      	ands	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	3308      	adds	r3, #8
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e004      	b.n	8001740 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	3314      	adds	r3, #20
 800173e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	461a      	mov	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff fde0 	bl	8001328 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e099      	b.n	80018a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0201 	bic.w	r2, r2, #1
 8001792:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001794:	e00f      	b.n	80017b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001796:	f7ff fdc7 	bl	8001328 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d908      	bls.n	80017b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2220      	movs	r2, #32
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2203      	movs	r2, #3
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e078      	b.n	80018a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e8      	bne.n	8001796 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_DMA_Init+0x158>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2b04      	cmp	r3, #4
 800180e:	d107      	bne.n	8001820 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4313      	orrs	r3, r2
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	4313      	orrs	r3, r2
 800181e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f023 0307 	bic.w	r3, r3, #7
 8001836:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	2b04      	cmp	r3, #4
 8001848:	d117      	bne.n	800187a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4313      	orrs	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00e      	beq.n	800187a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 fa6f 	bl	8001d40 <DMA_CheckFifoParam>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001876:	2301      	movs	r3, #1
 8001878:	e016      	b.n	80018a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 fa26 	bl	8001cd4 <DMA_CalcBaseAndBitshift>
 8001888:	4603      	mov	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	223f      	movs	r2, #63	; 0x3f
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	f010803f 	.word	0xf010803f

080018b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Start_IT+0x26>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e040      	b.n	800195c <HAL_DMA_Start_IT+0xa8>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d12f      	bne.n	800194e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2202      	movs	r2, #2
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f9b8 	bl	8001c78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190c:	223f      	movs	r2, #63	; 0x3f
 800190e:	409a      	lsls	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0216 	orr.w	r2, r2, #22
 8001922:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0208 	orr.w	r2, r2, #8
 800193a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e005      	b.n	800195a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001956:	2302      	movs	r3, #2
 8001958:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800195a:	7dfb      	ldrb	r3, [r7, #23]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001970:	4b92      	ldr	r3, [pc, #584]	; (8001bbc <HAL_DMA_IRQHandler+0x258>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a92      	ldr	r2, [pc, #584]	; (8001bc0 <HAL_DMA_IRQHandler+0x25c>)
 8001976:	fba2 2303 	umull	r2, r3, r2, r3
 800197a:	0a9b      	lsrs	r3, r3, #10
 800197c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	2208      	movs	r2, #8
 8001990:	409a      	lsls	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01a      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0204 	bic.w	r2, r2, #4
 80019b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2208      	movs	r2, #8
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2201      	movs	r2, #1
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d012      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2201      	movs	r2, #1
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fe:	f043 0202 	orr.w	r2, r3, #2
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d012      	beq.n	8001a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	2204      	movs	r2, #4
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a34:	f043 0204 	orr.w	r2, r3, #4
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	2210      	movs	r2, #16
 8001a42:	409a      	lsls	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d043      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d03c      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5e:	2210      	movs	r2, #16
 8001a60:	409a      	lsls	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d108      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d024      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
 8001a92:	e01f      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01b      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	e016      	b.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d107      	bne.n	8001ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0208 	bic.w	r2, r2, #8
 8001ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	2220      	movs	r2, #32
 8001ada:	409a      	lsls	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 808e 	beq.w	8001c02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8086 	beq.w	8001c02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2220      	movs	r2, #32
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b05      	cmp	r3, #5
 8001b0c:	d136      	bne.n	8001b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0216 	bic.w	r2, r2, #22
 8001b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d103      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x1da>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0208 	bic.w	r2, r2, #8
 8001b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	223f      	movs	r2, #63	; 0x3f
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d07d      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	4798      	blx	r3
        }
        return;
 8001b7a:	e078      	b.n	8001c6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01c      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d108      	bne.n	8001baa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d030      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
 8001ba8:	e02b      	b.n	8001c02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d027      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
 8001bba:	e022      	b.n	8001c02 <HAL_DMA_IRQHandler+0x29e>
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 0210 	bic.w	r2, r2, #16
 8001be0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d032      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2205      	movs	r2, #5
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0201 	bic.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	3301      	adds	r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d307      	bcc.n	8001c4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f2      	bne.n	8001c2e <HAL_DMA_IRQHandler+0x2ca>
 8001c48:	e000      	b.n	8001c4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	4798      	blx	r3
 8001c6c:	e000      	b.n	8001c70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c6e:	bf00      	nop
    }
  }
}
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop

08001c78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d108      	bne.n	8001cb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cb6:	e007      	b.n	8001cc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	60da      	str	r2, [r3, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3b10      	subs	r3, #16
 8001ce4:	4a14      	ldr	r2, [pc, #80]	; (8001d38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <DMA_CalcBaseAndBitshift+0x68>)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d909      	bls.n	8001d16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d0a:	f023 0303 	bic.w	r3, r3, #3
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	; 0x58
 8001d14:	e007      	b.n	8001d26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	aaaaaaab 	.word	0xaaaaaaab
 8001d3c:	08005a4c 	.word	0x08005a4c

08001d40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11f      	bne.n	8001d9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d855      	bhi.n	8001e0c <DMA_CheckFifoParam+0xcc>
 8001d60:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <DMA_CheckFifoParam+0x28>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001d79 	.word	0x08001d79
 8001d6c:	08001d8b 	.word	0x08001d8b
 8001d70:	08001d79 	.word	0x08001d79
 8001d74:	08001e0d 	.word	0x08001e0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d045      	beq.n	8001e10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d88:	e042      	b.n	8001e10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d92:	d13f      	bne.n	8001e14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d98:	e03c      	b.n	8001e14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da2:	d121      	bne.n	8001de8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d836      	bhi.n	8001e18 <DMA_CheckFifoParam+0xd8>
 8001daa:	a201      	add	r2, pc, #4	; (adr r2, 8001db0 <DMA_CheckFifoParam+0x70>)
 8001dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db0:	08001dc1 	.word	0x08001dc1
 8001db4:	08001dc7 	.word	0x08001dc7
 8001db8:	08001dc1 	.word	0x08001dc1
 8001dbc:	08001dd9 	.word	0x08001dd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001dc4:	e02f      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d024      	beq.n	8001e1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dd6:	e021      	b.n	8001e1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001de0:	d11e      	bne.n	8001e20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001de6:	e01b      	b.n	8001e20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d902      	bls.n	8001df4 <DMA_CheckFifoParam+0xb4>
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d003      	beq.n	8001dfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001df2:	e018      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
      break;
 8001df8:	e015      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00e      	beq.n	8001e24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0a:	e00b      	b.n	8001e24 <DMA_CheckFifoParam+0xe4>
      break;
 8001e0c:	bf00      	nop
 8001e0e:	e00a      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e10:	bf00      	nop
 8001e12:	e008      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e14:	bf00      	nop
 8001e16:	e006      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e18:	bf00      	nop
 8001e1a:	e004      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e1c:	bf00      	nop
 8001e1e:	e002      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;   
 8001e20:	bf00      	nop
 8001e22:	e000      	b.n	8001e26 <DMA_CheckFifoParam+0xe6>
      break;
 8001e24:	bf00      	nop
    }
  } 
  
  return status; 
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e16b      	b.n	8002128 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 815a 	bne.w	8002122 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d00b      	beq.n	8001e8e <HAL_GPIO_Init+0x5a>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e82:	2b11      	cmp	r3, #17
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0xfc>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80b4 	beq.w	8002122 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b5f      	ldr	r3, [pc, #380]	; (800213c <HAL_GPIO_Init+0x308>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a5e      	ldr	r2, [pc, #376]	; (800213c <HAL_GPIO_Init+0x308>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b5c      	ldr	r3, [pc, #368]	; (800213c <HAL_GPIO_Init+0x308>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd6:	4a5a      	ldr	r2, [pc, #360]	; (8002140 <HAL_GPIO_Init+0x30c>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_GPIO_Init+0x310>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02b      	beq.n	800205a <HAL_GPIO_Init+0x226>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_GPIO_Init+0x314>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d025      	beq.n	8002056 <HAL_GPIO_Init+0x222>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	; (800214c <HAL_GPIO_Init+0x318>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_GPIO_Init+0x21e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_GPIO_Init+0x31c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x21a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_GPIO_Init+0x320>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x216>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4c      	ldr	r2, [pc, #304]	; (8002158 <HAL_GPIO_Init+0x324>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x212>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4b      	ldr	r2, [pc, #300]	; (800215c <HAL_GPIO_Init+0x328>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x20e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4a      	ldr	r2, [pc, #296]	; (8002160 <HAL_GPIO_Init+0x32c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x20a>
 800203a:	2307      	movs	r3, #7
 800203c:	e00e      	b.n	800205c <HAL_GPIO_Init+0x228>
 800203e:	2308      	movs	r3, #8
 8002040:	e00c      	b.n	800205c <HAL_GPIO_Init+0x228>
 8002042:	2306      	movs	r3, #6
 8002044:	e00a      	b.n	800205c <HAL_GPIO_Init+0x228>
 8002046:	2305      	movs	r3, #5
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x228>
 800204a:	2304      	movs	r3, #4
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x228>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x228>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x228>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x228>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206c:	4934      	ldr	r1, [pc, #208]	; (8002140 <HAL_GPIO_Init+0x30c>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_GPIO_Init+0x330>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209e:	4a31      	ldr	r2, [pc, #196]	; (8002164 <HAL_GPIO_Init+0x330>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a4:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_GPIO_Init+0x330>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c8:	4a26      	ldr	r2, [pc, #152]	; (8002164 <HAL_GPIO_Init+0x330>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_GPIO_Init+0x330>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f2:	4a1c      	ldr	r2, [pc, #112]	; (8002164 <HAL_GPIO_Init+0x330>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <HAL_GPIO_Init+0x330>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_GPIO_Init+0x330>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f ae90 	bls.w	8001e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	3724      	adds	r7, #36	; 0x24
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40023800 	.word	0x40023800
 8002140:	40013800 	.word	0x40013800
 8002144:	40020000 	.word	0x40020000
 8002148:	40020400 	.word	0x40020400
 800214c:	40020800 	.word	0x40020800
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40021000 	.word	0x40021000
 8002158:	40021400 	.word	0x40021400
 800215c:	40021800 	.word	0x40021800
 8002160:	40021c00 	.word	0x40021c00
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e11f      	b.n	80023ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe feb2 	bl	8000f2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2224      	movs	r2, #36	; 0x24
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002200:	f002 f936 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8002204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4a7b      	ldr	r2, [pc, #492]	; (80023f8 <HAL_I2C_Init+0x25c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d807      	bhi.n	8002220 <HAL_I2C_Init+0x84>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a7a      	ldr	r2, [pc, #488]	; (80023fc <HAL_I2C_Init+0x260>)
 8002214:	4293      	cmp	r3, r2
 8002216:	bf94      	ite	ls
 8002218:	2301      	movls	r3, #1
 800221a:	2300      	movhi	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e006      	b.n	800222e <HAL_I2C_Init+0x92>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a77      	ldr	r2, [pc, #476]	; (8002400 <HAL_I2C_Init+0x264>)
 8002224:	4293      	cmp	r3, r2
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e0db      	b.n	80023ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4a72      	ldr	r2, [pc, #456]	; (8002404 <HAL_I2C_Init+0x268>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0c9b      	lsrs	r3, r3, #18
 8002240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a64      	ldr	r2, [pc, #400]	; (80023f8 <HAL_I2C_Init+0x25c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d802      	bhi.n	8002270 <HAL_I2C_Init+0xd4>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3301      	adds	r3, #1
 800226e:	e009      	b.n	8002284 <HAL_I2C_Init+0xe8>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	4a63      	ldr	r2, [pc, #396]	; (8002408 <HAL_I2C_Init+0x26c>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	099b      	lsrs	r3, r3, #6
 8002282:	3301      	adds	r3, #1
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002296:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4956      	ldr	r1, [pc, #344]	; (80023f8 <HAL_I2C_Init+0x25c>)
 80022a0:	428b      	cmp	r3, r1
 80022a2:	d80d      	bhi.n	80022c0 <HAL_I2C_Init+0x124>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1e59      	subs	r1, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	bf38      	it	cc
 80022bc:	2304      	movcc	r3, #4
 80022be:	e04f      	b.n	8002360 <HAL_I2C_Init+0x1c4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d111      	bne.n	80022ec <HAL_I2C_Init+0x150>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e012      	b.n	8002312 <HAL_I2C_Init+0x176>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1e58      	subs	r0, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	0099      	lsls	r1, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002302:	3301      	adds	r3, #1
 8002304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Init+0x17e>
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <HAL_I2C_Init+0x1c4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10e      	bne.n	8002340 <HAL_I2C_Init+0x1a4>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1e58      	subs	r0, r3, #1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	440b      	add	r3, r1
 8002330:	fbb0 f3f3 	udiv	r3, r0, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233e:	e00f      	b.n	8002360 <HAL_I2C_Init+0x1c4>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	0099      	lsls	r1, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	fbb0 f3f3 	udiv	r3, r0, r3
 8002356:	3301      	adds	r3, #1
 8002358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	6809      	ldr	r1, [r1, #0]
 8002364:	4313      	orrs	r3, r2
 8002366:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800238e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6911      	ldr	r1, [r2, #16]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68d2      	ldr	r2, [r2, #12]
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	430b      	orrs	r3, r1
 80023a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	000186a0 	.word	0x000186a0
 80023fc:	001e847f 	.word	0x001e847f
 8002400:	003d08ff 	.word	0x003d08ff
 8002404:	431bde83 	.word	0x431bde83
 8002408:	10624dd3 	.word	0x10624dd3

0800240c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	461a      	mov	r2, r3
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
 800241c:	4613      	mov	r3, r2
 800241e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7fe ff82 	bl	8001328 <HAL_GetTick>
 8002424:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b20      	cmp	r3, #32
 8002430:	f040 80e0 	bne.w	80025f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	2319      	movs	r3, #25
 800243a:	2201      	movs	r2, #1
 800243c:	4970      	ldr	r1, [pc, #448]	; (8002600 <HAL_I2C_Master_Transmit+0x1f4>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fc58 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	e0d3      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2C_Master_Transmit+0x50>
 8002458:	2302      	movs	r3, #2
 800245a:	e0cc      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d007      	beq.n	8002482 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002490:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2221      	movs	r2, #33	; 0x21
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2210      	movs	r2, #16
 800249e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	893a      	ldrh	r2, [r7, #8]
 80024b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_I2C_Master_Transmit+0x1f8>)
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6a3a      	ldr	r2, [r7, #32]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fac2 	bl	8002a54 <I2C_MasterRequestWrite>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e08d      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024f0:	e066      	b.n	80025c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	6a39      	ldr	r1, [r7, #32]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fcd2 	bl	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00d      	beq.n	800251e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b04      	cmp	r3, #4
 8002508:	d107      	bne.n	800251a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b04      	cmp	r3, #4
 800255a:	d11b      	bne.n	8002594 <HAL_I2C_Master_Transmit+0x188>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d017      	beq.n	8002594 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	6a39      	ldr	r1, [r7, #32]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fcc2 	bl	8002f22 <I2C_WaitOnBTFFlagUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d107      	bne.n	80025bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e01a      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d194      	bne.n	80024f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	00100002 	.word	0x00100002
 8002604:	ffff0000 	.word	0xffff0000

08002608 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	461a      	mov	r2, r3
 8002614:	460b      	mov	r3, r1
 8002616:	817b      	strh	r3, [r7, #10]
 8002618:	4613      	mov	r3, r2
 800261a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7fe fe84 	bl	8001328 <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b20      	cmp	r3, #32
 800262c:	f040 820b 	bne.w	8002a46 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2319      	movs	r3, #25
 8002636:	2201      	movs	r2, #1
 8002638:	497c      	ldr	r1, [pc, #496]	; (800282c <HAL_I2C_Master_Receive+0x224>)
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fb5a 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
 8002648:	e1fe      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_I2C_Master_Receive+0x50>
 8002654:	2302      	movs	r3, #2
 8002656:	e1f7      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d007      	beq.n	800267e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f042 0201 	orr.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800268c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2222      	movs	r2, #34	; 0x22
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2210      	movs	r2, #16
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	893a      	ldrh	r2, [r7, #8]
 80026ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4a5c      	ldr	r2, [pc, #368]	; (8002830 <HAL_I2C_Master_Receive+0x228>)
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fa46 	bl	8002b58 <I2C_MasterRequestRead>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1b8      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d113      	bne.n	8002706 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	623b      	str	r3, [r7, #32]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	623b      	str	r3, [r7, #32]
 80026f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e18c      	b.n	8002a20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270a:	2b01      	cmp	r3, #1
 800270c:	d11b      	bne.n	8002746 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	61fb      	str	r3, [r7, #28]
 8002732:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e16c      	b.n	8002a20 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	2b02      	cmp	r3, #2
 800274c:	d11b      	bne.n	8002786 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	e14c      	b.n	8002a20 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027ac:	e138      	b.n	8002a20 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	f200 80f1 	bhi.w	800299a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d123      	bne.n	8002808 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 fbed 	bl	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e139      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002806:	e10b      	b.n	8002a20 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	2b02      	cmp	r3, #2
 800280e:	d14e      	bne.n	80028ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	2200      	movs	r2, #0
 8002818:	4906      	ldr	r1, [pc, #24]	; (8002834 <HAL_I2C_Master_Receive+0x22c>)
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fa6a 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e10e      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
 800282a:	bf00      	nop
 800282c:	00100002 	.word	0x00100002
 8002830:	ffff0000 	.word	0xffff0000
 8002834:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ac:	e0b8      	b.n	8002a20 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b4:	2200      	movs	r2, #0
 80028b6:	4966      	ldr	r1, [pc, #408]	; (8002a50 <HAL_I2C_Master_Receive+0x448>)
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fa1b 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0bf      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	2200      	movs	r2, #0
 8002912:	494f      	ldr	r1, [pc, #316]	; (8002a50 <HAL_I2C_Master_Receive+0x448>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f9ed 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e091      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002998:	e042      	b.n	8002a20 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 fb00 	bl	8002fa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e04c      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d118      	bne.n	8002a20 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f47f aec2 	bne.w	80027ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e000      	b.n	8002a48 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a46:	2302      	movs	r3, #2
  }
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3728      	adds	r7, #40	; 0x28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	00010004 	.word	0x00010004

08002a54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af02      	add	r7, sp, #8
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	460b      	mov	r3, r1
 8002a62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d006      	beq.n	8002a7e <I2C_MasterRequestWrite+0x2a>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d003      	beq.n	8002a7e <I2C_MasterRequestWrite+0x2a>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a7c:	d108      	bne.n	8002a90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e00b      	b.n	8002aa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	2b12      	cmp	r3, #18
 8002a96:	d107      	bne.n	8002aa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f91d 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ace:	d103      	bne.n	8002ad8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e035      	b.n	8002b48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae4:	d108      	bne.n	8002af8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	e01b      	b.n	8002b30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002af8:	897b      	ldrh	r3, [r7, #10]
 8002afa:	11db      	asrs	r3, r3, #7
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0306 	and.w	r3, r3, #6
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f063 030f 	orn	r3, r3, #15
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <I2C_MasterRequestWrite+0xfc>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f943 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e010      	b.n	8002b48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4907      	ldr	r1, [pc, #28]	; (8002b54 <I2C_MasterRequestWrite+0x100>)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f933 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	00010008 	.word	0x00010008
 8002b54:	00010002 	.word	0x00010002

08002b58 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d006      	beq.n	8002b92 <I2C_MasterRequestRead+0x3a>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d003      	beq.n	8002b92 <I2C_MasterRequestRead+0x3a>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b90:	d108      	bne.n	8002ba4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e00b      	b.n	8002bbc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	2b11      	cmp	r3, #17
 8002baa:	d107      	bne.n	8002bbc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f893 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be2:	d103      	bne.n	8002bec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e079      	b.n	8002ce4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf8:	d108      	bne.n	8002c0c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bfa:	897b      	ldrh	r3, [r7, #10]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]
 8002c0a:	e05f      	b.n	8002ccc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	11db      	asrs	r3, r3, #7
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 0306 	and.w	r3, r3, #6
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f063 030f 	orn	r3, r3, #15
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4930      	ldr	r1, [pc, #192]	; (8002cec <I2C_MasterRequestRead+0x194>)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f8b9 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e054      	b.n	8002ce4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4929      	ldr	r1, [pc, #164]	; (8002cf0 <I2C_MasterRequestRead+0x198>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8a9 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e044      	b.n	8002ce4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f831 	bl	8002cf4 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00d      	beq.n	8002cb4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca6:	d103      	bne.n	8002cb0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e017      	b.n	8002ce4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cb4:	897b      	ldrh	r3, [r7, #10]
 8002cb6:	11db      	asrs	r3, r3, #7
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f003 0306 	and.w	r3, r3, #6
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f063 030e 	orn	r3, r3, #14
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <I2C_MasterRequestRead+0x198>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f865 	bl	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	00010008 	.word	0x00010008
 8002cf0:	00010002 	.word	0x00010002

08002cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d04:	e025      	b.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d021      	beq.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0e:	f7fe fb0b 	bl	8001328 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d302      	bcc.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d116      	bne.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f043 0220 	orr.w	r2, r3, #32
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e023      	b.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10d      	bne.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	43da      	mvns	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf0c      	ite	eq
 8002d6e:	2301      	moveq	r3, #1
 8002d70:	2300      	movne	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	e00c      	b.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4013      	ands	r3, r2
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf0c      	ite	eq
 8002d8a:	2301      	moveq	r3, #1
 8002d8c:	2300      	movne	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d0b6      	beq.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db0:	e051      	b.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dc0:	d123      	bne.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e046      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d021      	beq.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e12:	f7fe fa89 	bl	8001328 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d302      	bcc.n	8002e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f043 0220 	orr.w	r2, r3, #32
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e020      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10c      	bne.n	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	43da      	mvns	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e00b      	b.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	43da      	mvns	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf14      	ite	ne
 8002e8c:	2301      	movne	r3, #1
 8002e8e:	2300      	moveq	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d18d      	bne.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eac:	e02d      	b.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8ce 	bl	8003050 <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e02d      	b.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d021      	beq.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fe fa2f 	bl	8001328 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e007      	b.n	8002f1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f14:	2b80      	cmp	r3, #128	; 0x80
 8002f16:	d1ca      	bne.n	8002eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b084      	sub	sp, #16
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f2e:	e02d      	b.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 f88d 	bl	8003050 <I2C_IsAcknowledgeFailed>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e02d      	b.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f46:	d021      	beq.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7fe f9ee 	bl	8001328 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e007      	b.n	8002f9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d1ca      	bne.n	8002f30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fb0:	e042      	b.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b10      	cmp	r3, #16
 8002fbe:	d119      	bne.n	8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0210 	mvn.w	r2, #16
 8002fc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e029      	b.n	8003048 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7fe f998 	bl	8001328 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d302      	bcc.n	800300a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0220 	orr.w	r2, r3, #32
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e007      	b.n	8003048 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d1b5      	bne.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d11b      	bne.n	80030a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003070:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f043 0204 	orr.w	r2, r3, #4
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e128      	b.n	8003314 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a90      	ldr	r2, [pc, #576]	; (800331c <HAL_I2S_Init+0x26c>)
 80030da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fd ff6d 	bl	8000fbc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030f8:	f023 030f 	bic.w	r3, r3, #15
 80030fc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d060      	beq.n	80031d0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003116:	2310      	movs	r3, #16
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e001      	b.n	8003120 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800311c:	2320      	movs	r3, #32
 800311e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b20      	cmp	r3, #32
 8003126:	d802      	bhi.n	800312e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800312e:	2001      	movs	r0, #1
 8003130:	f001 fa94 	bl	800465c <HAL_RCCEx_GetPeriphCLKFreq>
 8003134:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800313e:	d125      	bne.n	800318c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	3305      	adds	r3, #5
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	e01f      	b.n	80031aa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	fbb2 f2f3 	udiv	r2, r2, r3
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	461a      	mov	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	3305      	adds	r3, #5
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e00e      	b.n	80031aa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	fbb2 f2f3 	udiv	r2, r2, r3
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	461a      	mov	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a6:	3305      	adds	r3, #5
 80031a8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4a5c      	ldr	r2, [pc, #368]	; (8003320 <HAL_I2S_Init+0x270>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	08db      	lsrs	r3, r3, #3
 80031b4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	e003      	b.n	80031d8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031d0:	2302      	movs	r3, #2
 80031d2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d902      	bls.n	80031e4 <HAL_I2S_Init+0x134>
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	2bff      	cmp	r3, #255	; 0xff
 80031e2:	d907      	bls.n	80031f4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	f043 0210 	orr.w	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e08f      	b.n	8003314 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	ea42 0103 	orr.w	r1, r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	430a      	orrs	r2, r1
 8003206:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003212:	f023 030f 	bic.w	r3, r3, #15
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6851      	ldr	r1, [r2, #4]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	4311      	orrs	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68d2      	ldr	r2, [r2, #12]
 8003224:	4311      	orrs	r1, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6992      	ldr	r2, [r2, #24]
 800322a:	430a      	orrs	r2, r1
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003236:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d161      	bne.n	8003304 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a38      	ldr	r2, [pc, #224]	; (8003324 <HAL_I2S_Init+0x274>)
 8003244:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a37      	ldr	r2, [pc, #220]	; (8003328 <HAL_I2S_Init+0x278>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d101      	bne.n	8003254 <HAL_I2S_Init+0x1a4>
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <HAL_I2S_Init+0x27c>)
 8003252:	e001      	b.n	8003258 <HAL_I2S_Init+0x1a8>
 8003254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	4932      	ldr	r1, [pc, #200]	; (8003328 <HAL_I2S_Init+0x278>)
 8003260:	428a      	cmp	r2, r1
 8003262:	d101      	bne.n	8003268 <HAL_I2S_Init+0x1b8>
 8003264:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_I2S_Init+0x27c>)
 8003266:	e001      	b.n	800326c <HAL_I2S_Init+0x1bc>
 8003268:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800326c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003270:	f023 030f 	bic.w	r3, r3, #15
 8003274:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <HAL_I2S_Init+0x278>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_I2S_Init+0x1d4>
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <HAL_I2S_Init+0x27c>)
 8003282:	e001      	b.n	8003288 <HAL_I2S_Init+0x1d8>
 8003284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003288:	2202      	movs	r2, #2
 800328a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a25      	ldr	r2, [pc, #148]	; (8003328 <HAL_I2S_Init+0x278>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_I2S_Init+0x1ea>
 8003296:	4b25      	ldr	r3, [pc, #148]	; (800332c <HAL_I2S_Init+0x27c>)
 8003298:	e001      	b.n	800329e <HAL_I2S_Init+0x1ee>
 800329a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032aa:	d003      	beq.n	80032b4 <HAL_I2S_Init+0x204>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d103      	bne.n	80032bc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80032b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	e001      	b.n	80032c0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	b299      	uxth	r1, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80032d6:	4303      	orrs	r3, r0
 80032d8:	b29b      	uxth	r3, r3
 80032da:	430b      	orrs	r3, r1
 80032dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80032de:	4313      	orrs	r3, r2
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032ec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <HAL_I2S_Init+0x278>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_I2S_Init+0x24c>
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_I2S_Init+0x27c>)
 80032fa:	e001      	b.n	8003300 <HAL_I2S_Init+0x250>
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	897a      	ldrh	r2, [r7, #10]
 8003302:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	08003635 	.word	0x08003635
 8003320:	cccccccd 	.word	0xcccccccd
 8003324:	08003749 	.word	0x08003749
 8003328:	40003800 	.word	0x40003800
 800332c:	40003400 	.word	0x40003400

08003330 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	4613      	mov	r3, r2
 800333c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_I2S_Transmit_DMA+0x1a>
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e08e      	b.n	800346c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_I2S_Transmit_DMA+0x2e>
 800335a:	2302      	movs	r3, #2
 800335c:	e086      	b.n	800346c <HAL_I2S_Transmit_DMA+0x13c>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d005      	beq.n	800337e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	e076      	b.n	800346c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2203      	movs	r2, #3
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d002      	beq.n	80033aa <HAL_I2S_Transmit_DMA+0x7a>
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d10a      	bne.n	80033c0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033be:	e005      	b.n	80033cc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	88fa      	ldrh	r2, [r7, #6]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	4a28      	ldr	r2, [pc, #160]	; (8003474 <HAL_I2S_Transmit_DMA+0x144>)
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	4a27      	ldr	r2, [pc, #156]	; (8003478 <HAL_I2S_Transmit_DMA+0x148>)
 80033da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	4a26      	ldr	r2, [pc, #152]	; (800347c <HAL_I2S_Transmit_DMA+0x14c>)
 80033e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80033ec:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80033f4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80033fc:	f7fe fa5a 	bl	80018b4 <HAL_DMA_Start_IT>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00f      	beq.n	8003426 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f043 0208 	orr.w	r2, r3, #8
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e022      	b.n	800346c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d107      	bne.n	8003444 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003442:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d107      	bne.n	8003462 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0202 	orr.w	r2, r2, #2
 8003460:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	08003513 	.word	0x08003513
 8003478:	080034d1 	.word	0x080034d1
 800347c:	0800352f 	.word	0x0800352f

08003480 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10e      	bne.n	8003504 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0202 	bic.w	r2, r2, #2
 80034f4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff ffc5 	bl	8003494 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b084      	sub	sp, #16
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff ffad 	bl	8003480 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0203 	bic.w	r2, r2, #3
 800354a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003564:	f043 0208 	orr.w	r2, r3, #8
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff ffa5 	bl	80034bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	1c9a      	adds	r2, r3, #2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10e      	bne.n	80035ce <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff63 	bl	8003494 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	b292      	uxth	r2, r2
 80035ea:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	1c9a      	adds	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10e      	bne.n	800362c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800361c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff3e 	bl	80034a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b04      	cmp	r3, #4
 800364e:	d13a      	bne.n	80036c6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d109      	bne.n	800366e <I2S_IRQHandler+0x3a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d102      	bne.n	800366e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ffb4 	bl	80035d6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d126      	bne.n	80036c6 <I2S_IRQHandler+0x92>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b20      	cmp	r3, #32
 8003684:	d11f      	bne.n	80036c6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003694:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	f043 0202 	orr.w	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fefb 	bl	80034bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d136      	bne.n	8003740 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d109      	bne.n	80036f0 <I2S_IRQHandler+0xbc>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d102      	bne.n	80036f0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff45 	bl	800357a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d122      	bne.n	8003740 <I2S_IRQHandler+0x10c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b20      	cmp	r3, #32
 8003706:	d11b      	bne.n	8003740 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003716:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff febe 	bl	80034bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003740:	bf00      	nop
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4aa2      	ldr	r2, [pc, #648]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003762:	4ba2      	ldr	r3, [pc, #648]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003764:	e001      	b.n	800376a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003766:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a9b      	ldr	r2, [pc, #620]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d101      	bne.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003780:	4b9a      	ldr	r3, [pc, #616]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003782:	e001      	b.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003794:	d004      	beq.n	80037a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 8099 	bne.w	80038d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d107      	bne.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f925 	bl	8003a04 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f9c8 	bl	8003b64 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d13a      	bne.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d035      	beq.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a7e      	ldr	r2, [pc, #504]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d101      	bne.n	80037f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80037f2:	4b7e      	ldr	r3, [pc, #504]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037f4:	e001      	b.n	80037fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80037f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4979      	ldr	r1, [pc, #484]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003802:	428b      	cmp	r3, r1
 8003804:	d101      	bne.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003806:	4b79      	ldr	r3, [pc, #484]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003808:	e001      	b.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003812:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003822:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f043 0202 	orr.w	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fe34 	bl	80034bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b08      	cmp	r3, #8
 800385c:	f040 80be 	bne.w	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80b8 	beq.w	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800387a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a59      	ldr	r2, [pc, #356]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003886:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003888:	e001      	b.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800388a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4954      	ldr	r1, [pc, #336]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003896:	428b      	cmp	r3, r1
 8003898:	d101      	bne.n	800389e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800389a:	4b54      	ldr	r3, [pc, #336]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800389c:	e001      	b.n	80038a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800389e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038a8:	2300      	movs	r3, #0
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fdf6 	bl	80034bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038d0:	e084      	b.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d107      	bne.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8be 	bl	8003a68 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d107      	bne.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f8fd 	bl	8003b00 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b40      	cmp	r3, #64	; 0x40
 800390e:	d12f      	bne.n	8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d02a      	beq.n	8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003928:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2e      	ldr	r2, [pc, #184]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d101      	bne.n	8003938 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003936:	e001      	b.n	800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4929      	ldr	r1, [pc, #164]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003944:	428b      	cmp	r3, r1
 8003946:	d101      	bne.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003948:	4b28      	ldr	r3, [pc, #160]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800394a:	e001      	b.n	8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800394c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003950:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003954:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f043 0202 	orr.w	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fda6 	bl	80034bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	d131      	bne.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d02c      	beq.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800398e:	4b17      	ldr	r3, [pc, #92]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003990:	e001      	b.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4912      	ldr	r1, [pc, #72]	; (80039e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800399e:	428b      	cmp	r3, r1
 80039a0:	d101      	bne.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039a4:	e001      	b.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80039a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039be:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	f043 0204 	orr.w	r2, r3, #4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff fd71 	bl	80034bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039da:	e000      	b.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039dc:	bf00      	nop
}
 80039de:	bf00      	nop
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40003800 	.word	0x40003800
 80039ec:	40003400 	.word	0x40003400

080039f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	1c99      	adds	r1, r3, #2
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6251      	str	r1, [r2, #36]	; 0x24
 8003a16:	881a      	ldrh	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d113      	bne.n	8003a5e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d106      	bne.n	8003a5e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ffc9 	bl	80039f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	1c99      	adds	r1, r3, #2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6251      	str	r1, [r2, #36]	; 0x24
 8003a7a:	8819      	ldrh	r1, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <I2SEx_TxISR_I2SExt+0x90>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <I2SEx_TxISR_I2SExt+0x22>
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <I2SEx_TxISR_I2SExt+0x94>)
 8003a88:	e001      	b.n	8003a8e <I2SEx_TxISR_I2SExt+0x26>
 8003a8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a8e:	460a      	mov	r2, r1
 8003a90:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d121      	bne.n	8003aee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <I2SEx_TxISR_I2SExt+0x90>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <I2SEx_TxISR_I2SExt+0x50>
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <I2SEx_TxISR_I2SExt+0x94>)
 8003ab6:	e001      	b.n	8003abc <I2SEx_TxISR_I2SExt+0x54>
 8003ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	490d      	ldr	r1, [pc, #52]	; (8003af8 <I2SEx_TxISR_I2SExt+0x90>)
 8003ac4:	428b      	cmp	r3, r1
 8003ac6:	d101      	bne.n	8003acc <I2SEx_TxISR_I2SExt+0x64>
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <I2SEx_TxISR_I2SExt+0x94>)
 8003aca:	e001      	b.n	8003ad0 <I2SEx_TxISR_I2SExt+0x68>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d106      	bne.n	8003aee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff ff81 	bl	80039f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40003800 	.word	0x40003800
 8003afc:	40003400 	.word	0x40003400

08003b00 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68d8      	ldr	r0, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	1c99      	adds	r1, r3, #2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b18:	b282      	uxth	r2, r0
 8003b1a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d113      	bne.n	8003b5c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b42:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff ff4a 	bl	80039f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3708      	adds	r7, #8
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a20      	ldr	r2, [pc, #128]	; (8003bf4 <I2SEx_RxISR_I2SExt+0x90>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d101      	bne.n	8003b7a <I2SEx_RxISR_I2SExt+0x16>
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <I2SEx_RxISR_I2SExt+0x94>)
 8003b78:	e001      	b.n	8003b7e <I2SEx_RxISR_I2SExt+0x1a>
 8003b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7e:	68d8      	ldr	r0, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	1c99      	adds	r1, r3, #2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b8a:	b282      	uxth	r2, r0
 8003b8c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d121      	bne.n	8003bea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a12      	ldr	r2, [pc, #72]	; (8003bf4 <I2SEx_RxISR_I2SExt+0x90>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d101      	bne.n	8003bb4 <I2SEx_RxISR_I2SExt+0x50>
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <I2SEx_RxISR_I2SExt+0x94>)
 8003bb2:	e001      	b.n	8003bb8 <I2SEx_RxISR_I2SExt+0x54>
 8003bb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	490d      	ldr	r1, [pc, #52]	; (8003bf4 <I2SEx_RxISR_I2SExt+0x90>)
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	d101      	bne.n	8003bc8 <I2SEx_RxISR_I2SExt+0x64>
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <I2SEx_RxISR_I2SExt+0x94>)
 8003bc6:	e001      	b.n	8003bcc <I2SEx_RxISR_I2SExt+0x68>
 8003bc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bd0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff03 	bl	80039f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40003800 	.word	0x40003800
 8003bf8:	40003400 	.word	0x40003400

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e25b      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d075      	beq.n	8003d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c1a:	4ba3      	ldr	r3, [pc, #652]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d00c      	beq.n	8003c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c26:	4ba0      	ldr	r3, [pc, #640]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d112      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c32:	4b9d      	ldr	r3, [pc, #628]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3e:	d10b      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	4b99      	ldr	r3, [pc, #612]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d05b      	beq.n	8003d04 <HAL_RCC_OscConfig+0x108>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d157      	bne.n	8003d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e236      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	d106      	bne.n	8003c70 <HAL_RCC_OscConfig+0x74>
 8003c62:	4b91      	ldr	r3, [pc, #580]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a90      	ldr	r2, [pc, #576]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e01d      	b.n	8003cac <HAL_RCC_OscConfig+0xb0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x98>
 8003c7a:	4b8b      	ldr	r3, [pc, #556]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a8a      	ldr	r2, [pc, #552]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	4b88      	ldr	r3, [pc, #544]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a87      	ldr	r2, [pc, #540]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0xb0>
 8003c94:	4b84      	ldr	r3, [pc, #528]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a83      	ldr	r2, [pc, #524]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b81      	ldr	r3, [pc, #516]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a80      	ldr	r2, [pc, #512]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fb38 	bl	8001328 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fd fb34 	bl	8001328 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e1fb      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0xc0>
 8003cda:	e014      	b.n	8003d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fb24 	bl	8001328 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fd fb20 	bl	8001328 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1e7      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xe8>
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d063      	beq.n	8003dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1e:	4b62      	ldr	r3, [pc, #392]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d11c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d116      	bne.n	8003d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	4b5c      	ldr	r3, [pc, #368]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_OscConfig+0x152>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d001      	beq.n	8003d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e1bb      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b56      	ldr	r3, [pc, #344]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4952      	ldr	r1, [pc, #328]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	e03a      	b.n	8003dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	; (8003eac <HAL_RCC_OscConfig+0x2b0>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fd fad9 	bl	8001328 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7a:	f7fd fad5 	bl	8001328 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e19c      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8c:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d98:	4b43      	ldr	r3, [pc, #268]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4940      	ldr	r1, [pc, #256]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]
 8003dac:	e015      	b.n	8003dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_RCC_OscConfig+0x2b0>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fab8 	bl	8001328 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dbc:	f7fd fab4 	bl	8001328 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e17b      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dce:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d030      	beq.n	8003e48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d016      	beq.n	8003e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dee:	4b30      	ldr	r3, [pc, #192]	; (8003eb0 <HAL_RCC_OscConfig+0x2b4>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fd fa98 	bl	8001328 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7fd fa94 	bl	8001328 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e15b      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0e:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x200>
 8003e1a:	e015      	b.n	8003e48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1c:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <HAL_RCC_OscConfig+0x2b4>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e22:	f7fd fa81 	bl	8001328 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2a:	f7fd fa7d 	bl	8001328 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e144      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80a0 	beq.w	8003f96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5a:	4b13      	ldr	r3, [pc, #76]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6413      	str	r3, [r2, #64]	; 0x40
 8003e76:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	60bb      	str	r3, [r7, #8]
 8003e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_RCC_OscConfig+0x2b8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d121      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e92:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_RCC_OscConfig+0x2b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <HAL_RCC_OscConfig+0x2b8>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9e:	f7fd fa43 	bl	8001328 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	e011      	b.n	8003eca <HAL_RCC_OscConfig+0x2ce>
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	42470000 	.word	0x42470000
 8003eb0:	42470e80 	.word	0x42470e80
 8003eb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb8:	f7fd fa36 	bl	8001328 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0fd      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eca:	4b81      	ldr	r3, [pc, #516]	; (80040d0 <HAL_RCC_OscConfig+0x4d4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d106      	bne.n	8003eec <HAL_RCC_OscConfig+0x2f0>
 8003ede:	4b7d      	ldr	r3, [pc, #500]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a7c      	ldr	r2, [pc, #496]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	e01c      	b.n	8003f26 <HAL_RCC_OscConfig+0x32a>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCC_OscConfig+0x312>
 8003ef4:	4b77      	ldr	r3, [pc, #476]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a76      	ldr	r2, [pc, #472]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	4b74      	ldr	r3, [pc, #464]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a73      	ldr	r2, [pc, #460]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	e00b      	b.n	8003f26 <HAL_RCC_OscConfig+0x32a>
 8003f0e:	4b71      	ldr	r3, [pc, #452]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a70      	ldr	r2, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1a:	4b6e      	ldr	r3, [pc, #440]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a6d      	ldr	r2, [pc, #436]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d015      	beq.n	8003f5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fd f9fb 	bl	8001328 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fd f9f7 	bl	8001328 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0bc      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ee      	beq.n	8003f36 <HAL_RCC_OscConfig+0x33a>
 8003f58:	e014      	b.n	8003f84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f5a:	f7fd f9e5 	bl	8001328 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fd f9e1 	bl	8001328 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e0a6      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f78:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d105      	bne.n	8003f96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8a:	4b52      	ldr	r3, [pc, #328]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a51      	ldr	r2, [pc, #324]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8092 	beq.w	80040c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa0:	4b4c      	ldr	r3, [pc, #304]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d05c      	beq.n	8004066 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d141      	bne.n	8004038 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb4:	4b48      	ldr	r3, [pc, #288]	; (80040d8 <HAL_RCC_OscConfig+0x4dc>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fd f9b5 	bl	8001328 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fd f9b1 	bl	8001328 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e078      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd4:	4b3f      	ldr	r3, [pc, #252]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f0      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	019b      	lsls	r3, r3, #6
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	041b      	lsls	r3, r3, #16
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	061b      	lsls	r3, r3, #24
 8004004:	4933      	ldr	r1, [pc, #204]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8004006:	4313      	orrs	r3, r2
 8004008:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800400a:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <HAL_RCC_OscConfig+0x4dc>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fd f98a 	bl	8001328 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004018:	f7fd f986 	bl	8001328 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e04d      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402a:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCC_OscConfig+0x41c>
 8004036:	e045      	b.n	80040c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <HAL_RCC_OscConfig+0x4dc>)
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fd f973 	bl	8001328 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004046:	f7fd f96f 	bl	8001328 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e036      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f0      	bne.n	8004046 <HAL_RCC_OscConfig+0x44a>
 8004064:	e02e      	b.n	80040c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d101      	bne.n	8004072 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e029      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <HAL_RCC_OscConfig+0x4d8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	429a      	cmp	r2, r3
 8004084:	d11c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d115      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800409a:	4013      	ands	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d10d      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d001      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e000      	b.n	80040c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40007000 	.word	0x40007000
 80040d4:	40023800 	.word	0x40023800
 80040d8:	42470060 	.word	0x42470060

080040dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0cc      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f0:	4b68      	ldr	r3, [pc, #416]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d90c      	bls.n	8004118 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fe:	4b65      	ldr	r3, [pc, #404]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004106:	4b63      	ldr	r3, [pc, #396]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d001      	beq.n	8004118 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0b8      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004130:	4b59      	ldr	r3, [pc, #356]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a58      	ldr	r2, [pc, #352]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800413a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004148:	4b53      	ldr	r3, [pc, #332]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a52      	ldr	r2, [pc, #328]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004152:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004154:	4b50      	ldr	r3, [pc, #320]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	494d      	ldr	r1, [pc, #308]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d044      	beq.n	80041fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800417a:	4b47      	ldr	r3, [pc, #284]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d119      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e07f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d003      	beq.n	800419a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	2b03      	cmp	r3, #3
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419a:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d109      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e06f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041aa:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e067      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ba:	4b37      	ldr	r3, [pc, #220]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f023 0203 	bic.w	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4934      	ldr	r1, [pc, #208]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041cc:	f7fd f8ac 	bl	8001328 <HAL_GetTick>
 80041d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	e00a      	b.n	80041ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d4:	f7fd f8a8 	bl	8001328 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e04f      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	4b2b      	ldr	r3, [pc, #172]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 020c 	and.w	r2, r3, #12
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d1eb      	bne.n	80041d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041fc:	4b25      	ldr	r3, [pc, #148]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d20c      	bcs.n	8004224 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e032      	b.n	800428a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004230:	4b19      	ldr	r3, [pc, #100]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4916      	ldr	r1, [pc, #88]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800424e:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	490e      	ldr	r1, [pc, #56]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004262:	f000 f821 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004266:	4601      	mov	r1, r0
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	4a0a      	ldr	r2, [pc, #40]	; (800429c <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	5cd3      	ldrb	r3, [r2, r3]
 8004276:	fa21 f303 	lsr.w	r3, r1, r3
 800427a:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800427e:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fd f80c 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40023c00 	.word	0x40023c00
 8004298:	40023800 	.word	0x40023800
 800429c:	08005a34 	.word	0x08005a34
 80042a0:	20000000 	.word	0x20000000
 80042a4:	20000004 	.word	0x20000004

080042a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	2300      	movs	r3, #0
 80042b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042be:	4b63      	ldr	r3, [pc, #396]	; (800444c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d007      	beq.n	80042da <HAL_RCC_GetSysClockFreq+0x32>
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d008      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x38>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f040 80b4 	bne.w	800443c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b5e      	ldr	r3, [pc, #376]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80042d6:	60bb      	str	r3, [r7, #8]
       break;
 80042d8:	e0b3      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042da:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80042dc:	60bb      	str	r3, [r7, #8]
      break;
 80042de:	e0b0      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e0:	4b5a      	ldr	r3, [pc, #360]	; (800444c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ea:	4b58      	ldr	r3, [pc, #352]	; (800444c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04a      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f6:	4b55      	ldr	r3, [pc, #340]	; (800444c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	f04f 0400 	mov.w	r4, #0
 8004300:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	ea03 0501 	and.w	r5, r3, r1
 800430c:	ea04 0602 	and.w	r6, r4, r2
 8004310:	4629      	mov	r1, r5
 8004312:	4632      	mov	r2, r6
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	f04f 0400 	mov.w	r4, #0
 800431c:	0154      	lsls	r4, r2, #5
 800431e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004322:	014b      	lsls	r3, r1, #5
 8004324:	4619      	mov	r1, r3
 8004326:	4622      	mov	r2, r4
 8004328:	1b49      	subs	r1, r1, r5
 800432a:	eb62 0206 	sbc.w	r2, r2, r6
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	f04f 0400 	mov.w	r4, #0
 8004336:	0194      	lsls	r4, r2, #6
 8004338:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800433c:	018b      	lsls	r3, r1, #6
 800433e:	1a5b      	subs	r3, r3, r1
 8004340:	eb64 0402 	sbc.w	r4, r4, r2
 8004344:	f04f 0100 	mov.w	r1, #0
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	00e2      	lsls	r2, r4, #3
 800434e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004352:	00d9      	lsls	r1, r3, #3
 8004354:	460b      	mov	r3, r1
 8004356:	4614      	mov	r4, r2
 8004358:	195b      	adds	r3, r3, r5
 800435a:	eb44 0406 	adc.w	r4, r4, r6
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	0262      	lsls	r2, r4, #9
 8004368:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800436c:	0259      	lsls	r1, r3, #9
 800436e:	460b      	mov	r3, r1
 8004370:	4614      	mov	r4, r2
 8004372:	4618      	mov	r0, r3
 8004374:	4621      	mov	r1, r4
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	461a      	mov	r2, r3
 800437e:	4623      	mov	r3, r4
 8004380:	f7fb ff22 	bl	80001c8 <__aeabi_uldivmod>
 8004384:	4603      	mov	r3, r0
 8004386:	460c      	mov	r4, r1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e049      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	f04f 0400 	mov.w	r4, #0
 8004396:	f240 11ff 	movw	r1, #511	; 0x1ff
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	ea03 0501 	and.w	r5, r3, r1
 80043a2:	ea04 0602 	and.w	r6, r4, r2
 80043a6:	4629      	mov	r1, r5
 80043a8:	4632      	mov	r2, r6
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	f04f 0400 	mov.w	r4, #0
 80043b2:	0154      	lsls	r4, r2, #5
 80043b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80043b8:	014b      	lsls	r3, r1, #5
 80043ba:	4619      	mov	r1, r3
 80043bc:	4622      	mov	r2, r4
 80043be:	1b49      	subs	r1, r1, r5
 80043c0:	eb62 0206 	sbc.w	r2, r2, r6
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	f04f 0400 	mov.w	r4, #0
 80043cc:	0194      	lsls	r4, r2, #6
 80043ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043d2:	018b      	lsls	r3, r1, #6
 80043d4:	1a5b      	subs	r3, r3, r1
 80043d6:	eb64 0402 	sbc.w	r4, r4, r2
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	00e2      	lsls	r2, r4, #3
 80043e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043e8:	00d9      	lsls	r1, r3, #3
 80043ea:	460b      	mov	r3, r1
 80043ec:	4614      	mov	r4, r2
 80043ee:	195b      	adds	r3, r3, r5
 80043f0:	eb44 0406 	adc.w	r4, r4, r6
 80043f4:	f04f 0100 	mov.w	r1, #0
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	02a2      	lsls	r2, r4, #10
 80043fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004402:	0299      	lsls	r1, r3, #10
 8004404:	460b      	mov	r3, r1
 8004406:	4614      	mov	r4, r2
 8004408:	4618      	mov	r0, r3
 800440a:	4621      	mov	r1, r4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f04f 0400 	mov.w	r4, #0
 8004412:	461a      	mov	r2, r3
 8004414:	4623      	mov	r3, r4
 8004416:	f7fb fed7 	bl	80001c8 <__aeabi_uldivmod>
 800441a:	4603      	mov	r3, r0
 800441c:	460c      	mov	r4, r1
 800441e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004420:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	60bb      	str	r3, [r7, #8]
      break;
 800443a:	e002      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800443e:	60bb      	str	r3, [r7, #8]
      break;
 8004440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004442:	68bb      	ldr	r3, [r7, #8]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800444c:	40023800 	.word	0x40023800
 8004450:	00f42400 	.word	0x00f42400
 8004454:	007a1200 	.word	0x007a1200

08004458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCC_GetHCLKFreq+0x14>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000000 	.word	0x20000000

08004470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004474:	f7ff fff0 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004478:	4601      	mov	r1, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0a9b      	lsrs	r3, r3, #10
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4a03      	ldr	r2, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004486:	5cd3      	ldrb	r3, [r2, r3]
 8004488:	fa21 f303 	lsr.w	r3, r1, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40023800 	.word	0x40023800
 8004494:	08005a44 	.word	0x08005a44

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d035      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044c0:	4b62      	ldr	r3, [pc, #392]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044c6:	f7fc ff2f 	bl	8001328 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044ce:	f7fc ff2b 	bl	8001328 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0b0      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e0:	4b5b      	ldr	r3, [pc, #364]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	019a      	lsls	r2, r3, #6
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	071b      	lsls	r3, r3, #28
 80044f8:	4955      	ldr	r1, [pc, #340]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004500:	4b52      	ldr	r3, [pc, #328]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004506:	f7fc ff0f 	bl	8001328 <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800450e:	f7fc ff0b 	bl	8001328 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e090      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004520:	4b4b      	ldr	r3, [pc, #300]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8083 	beq.w	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	4b44      	ldr	r3, [pc, #272]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	4a43      	ldr	r2, [pc, #268]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004548:	6413      	str	r3, [r2, #64]	; 0x40
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004556:	4b3f      	ldr	r3, [pc, #252]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3e      	ldr	r2, [pc, #248]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004562:	f7fc fee1 	bl	8001328 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004568:	e008      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fc fedd 	bl	8001328 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e062      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800457c:	4b35      	ldr	r3, [pc, #212]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004588:	4b31      	ldr	r3, [pc, #196]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004590:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d02f      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d028      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a6:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045b0:	4b29      	ldr	r3, [pc, #164]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b6:	4b28      	ldr	r3, [pc, #160]	; (8004658 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045bc:	4a24      	ldr	r2, [pc, #144]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d114      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fc feab 	bl	8001328 <HAL_GetTick>
 80045d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fc fea7 	bl	8001328 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e02a      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	4b18      	ldr	r3, [pc, #96]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ee      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004604:	d10d      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461a:	490d      	ldr	r1, [pc, #52]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	4313      	orrs	r3, r2
 800461e:	608b      	str	r3, [r1, #8]
 8004620:	e005      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004628:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800462c:	6093      	str	r3, [r2, #8]
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463a:	4905      	ldr	r1, [pc, #20]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463c:	4313      	orrs	r3, r2
 800463e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	42470068 	.word	0x42470068
 8004650:	40023800 	.word	0x40023800
 8004654:	40007000 	.word	0x40007000
 8004658:	42470e40 	.word	0x42470e40

0800465c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d13d      	bne.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004682:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800468a:	2b01      	cmp	r3, #1
 800468c:	d12f      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800468e:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004690:	617b      	str	r3, [r7, #20]
          break;
 8004692:	e02f      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a0:	d108      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046a2:	4b18      	ldr	r3, [pc, #96]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	613b      	str	r3, [r7, #16]
 80046b2:	e007      	b.n	80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b4:	4b13      	ldr	r3, [pc, #76]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046c4:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80046c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ca:	099b      	lsrs	r3, r3, #6
 80046cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80046da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046de:	0f1b      	lsrs	r3, r3, #28
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	617b      	str	r3, [r7, #20]
          break;
 80046ec:	e002      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
          break;
 80046f2:	bf00      	nop
        }
      }
      break;
 80046f4:	bf00      	nop
    }
  }
  return frequency;
 80046f6:	697b      	ldr	r3, [r7, #20]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	40023800 	.word	0x40023800
 8004708:	00bb8000 	.word	0x00bb8000
 800470c:	007a1200 	.word	0x007a1200
 8004710:	00f42400 	.word	0x00f42400

08004714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e01d      	b.n	8004762 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc fce6 	bl	800110c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f000 fa14 	bl	8004b80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b085      	sub	sp, #20
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b06      	cmp	r3, #6
 8004792:	d007      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d122      	bne.n	800480e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d11b      	bne.n	800480e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f06f 0202 	mvn.w	r2, #2
 80047de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f9a5 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
 80047fa:	e005      	b.n	8004808 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f997 	bl	8004b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f9a8 	bl	8004b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b04      	cmp	r3, #4
 800481a:	d122      	bne.n	8004862 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b04      	cmp	r3, #4
 8004828:	d11b      	bne.n	8004862 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f06f 0204 	mvn.w	r2, #4
 8004832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f97b 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
 800484e:	e005      	b.n	800485c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f96d 	bl	8004b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f97e 	bl	8004b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b08      	cmp	r3, #8
 800486e:	d122      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b08      	cmp	r3, #8
 800487c:	d11b      	bne.n	80048b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f06f 0208 	mvn.w	r2, #8
 8004886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2204      	movs	r2, #4
 800488c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f951 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
 80048a2:	e005      	b.n	80048b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f943 	bl	8004b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f954 	bl	8004b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d122      	bne.n	800490a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d11b      	bne.n	800490a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f06f 0210 	mvn.w	r2, #16
 80048da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2208      	movs	r2, #8
 80048e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f927 	bl	8004b44 <HAL_TIM_IC_CaptureCallback>
 80048f6:	e005      	b.n	8004904 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f919 	bl	8004b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f92a 	bl	8004b58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10e      	bne.n	8004936 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d107      	bne.n	8004936 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0201 	mvn.w	r2, #1
 800492e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fc fa29 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004940:	2b80      	cmp	r3, #128	; 0x80
 8004942:	d10e      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b80      	cmp	r3, #128	; 0x80
 8004950:	d107      	bne.n	8004962 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 facf 	bl	8004f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b40      	cmp	r3, #64	; 0x40
 800496e:	d10e      	bne.n	800498e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8ef 	bl	8004b6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b20      	cmp	r3, #32
 800499a:	d10e      	bne.n	80049ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0220 	mvn.w	r2, #32
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fa99 	bl	8004eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_TIM_ConfigClockSource+0x18>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e0a6      	b.n	8004b28 <HAL_TIM_ConfigClockSource+0x166>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a00:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d067      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x120>
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d80b      	bhi.n	8004a2e <HAL_TIM_ConfigClockSource+0x6c>
 8004a16:	2b10      	cmp	r3, #16
 8004a18:	d073      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x140>
 8004a1a:	2b10      	cmp	r3, #16
 8004a1c:	d802      	bhi.n	8004a24 <HAL_TIM_ConfigClockSource+0x62>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d06f      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004a22:	e078      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	d06c      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x140>
 8004a28:	2b30      	cmp	r3, #48	; 0x30
 8004a2a:	d06a      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004a2c:	e073      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a2e:	2b70      	cmp	r3, #112	; 0x70
 8004a30:	d00d      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x8c>
 8004a32:	2b70      	cmp	r3, #112	; 0x70
 8004a34:	d804      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x7e>
 8004a36:	2b50      	cmp	r3, #80	; 0x50
 8004a38:	d033      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0xe0>
 8004a3a:	2b60      	cmp	r3, #96	; 0x60
 8004a3c:	d041      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a3e:	e06a      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a44:	d066      	beq.n	8004b14 <HAL_TIM_ConfigClockSource+0x152>
 8004a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a4a:	d017      	beq.n	8004a7c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a4c:	e063      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6899      	ldr	r1, [r3, #8]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f000 f9a9 	bl	8004db4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	609a      	str	r2, [r3, #8]
      break;
 8004a7a:	e04c      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	6899      	ldr	r1, [r3, #8]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f000 f992 	bl	8004db4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a9e:	609a      	str	r2, [r3, #8]
      break;
 8004aa0:	e039      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 f906 	bl	8004cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2150      	movs	r1, #80	; 0x50
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f95f 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e029      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 f925 	bl	8004d1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2160      	movs	r1, #96	; 0x60
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f94f 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e019      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 f8e6 	bl	8004cc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2140      	movs	r1, #64	; 0x40
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f93f 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004b00:	e009      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 f936 	bl	8004d7e <TIM_ITRx_SetConfig>
      break;
 8004b12:	e000      	b.n	8004b16 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004b14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a40      	ldr	r2, [pc, #256]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a3d      	ldr	r2, [pc, #244]	; (8004c98 <TIM_Base_SetConfig+0x118>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a3c      	ldr	r2, [pc, #240]	; (8004c9c <TIM_Base_SetConfig+0x11c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a3b      	ldr	r2, [pc, #236]	; (8004ca0 <TIM_Base_SetConfig+0x120>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a3a      	ldr	r2, [pc, #232]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a2f      	ldr	r2, [pc, #188]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d02b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be0:	d027      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <TIM_Base_SetConfig+0x118>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d023      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a2b      	ldr	r2, [pc, #172]	; (8004c9c <TIM_Base_SetConfig+0x11c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d01f      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <TIM_Base_SetConfig+0x120>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d017      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <TIM_Base_SetConfig+0x128>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d013      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a27      	ldr	r2, [pc, #156]	; (8004cac <TIM_Base_SetConfig+0x12c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00f      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a26      	ldr	r2, [pc, #152]	; (8004cb0 <TIM_Base_SetConfig+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <TIM_Base_SetConfig+0x134>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a24      	ldr	r2, [pc, #144]	; (8004cb8 <TIM_Base_SetConfig+0x138>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	; (8004cbc <TIM_Base_SetConfig+0x13c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d108      	bne.n	8004c44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <TIM_Base_SetConfig+0x114>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <TIM_Base_SetConfig+0xf8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <TIM_Base_SetConfig+0x124>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d103      	bne.n	8004c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	615a      	str	r2, [r3, #20]
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40014400 	.word	0x40014400
 8004cb0:	40014800 	.word	0x40014800
 8004cb4:	40001800 	.word	0x40001800
 8004cb8:	40001c00 	.word	0x40001c00
 8004cbc:	40002000 	.word	0x40002000

08004cc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 0201 	bic.w	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 030a 	bic.w	r3, r3, #10
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b087      	sub	sp, #28
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f023 0210 	bic.w	r2, r3, #16
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	031b      	lsls	r3, r3, #12
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b085      	sub	sp, #20
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f043 0307 	orr.w	r3, r3, #7
 8004da0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	021a      	lsls	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	609a      	str	r2, [r3, #8]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e05a      	b.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d01d      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d018      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1b      	ldr	r2, [pc, #108]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1a      	ldr	r2, [pc, #104]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00e      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a18      	ldr	r2, [pc, #96]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a15      	ldr	r2, [pc, #84]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d10c      	bne.n	8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40001800 	.word	0x40001800

08004eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <__libc_init_array>:
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	4e0d      	ldr	r6, [pc, #52]	; (8004f4c <__libc_init_array+0x38>)
 8004f18:	4c0d      	ldr	r4, [pc, #52]	; (8004f50 <__libc_init_array+0x3c>)
 8004f1a:	1ba4      	subs	r4, r4, r6
 8004f1c:	10a4      	asrs	r4, r4, #2
 8004f1e:	2500      	movs	r5, #0
 8004f20:	42a5      	cmp	r5, r4
 8004f22:	d109      	bne.n	8004f38 <__libc_init_array+0x24>
 8004f24:	4e0b      	ldr	r6, [pc, #44]	; (8004f54 <__libc_init_array+0x40>)
 8004f26:	4c0c      	ldr	r4, [pc, #48]	; (8004f58 <__libc_init_array+0x44>)
 8004f28:	f000 fd78 	bl	8005a1c <_init>
 8004f2c:	1ba4      	subs	r4, r4, r6
 8004f2e:	10a4      	asrs	r4, r4, #2
 8004f30:	2500      	movs	r5, #0
 8004f32:	42a5      	cmp	r5, r4
 8004f34:	d105      	bne.n	8004f42 <__libc_init_array+0x2e>
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
 8004f38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f3c:	4798      	blx	r3
 8004f3e:	3501      	adds	r5, #1
 8004f40:	e7ee      	b.n	8004f20 <__libc_init_array+0xc>
 8004f42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f46:	4798      	blx	r3
 8004f48:	3501      	adds	r5, #1
 8004f4a:	e7f2      	b.n	8004f32 <__libc_init_array+0x1e>
 8004f4c:	08005e2c 	.word	0x08005e2c
 8004f50:	08005e2c 	.word	0x08005e2c
 8004f54:	08005e2c 	.word	0x08005e2c
 8004f58:	08005e30 	.word	0x08005e30

08004f5c <memcpy>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	1e43      	subs	r3, r0, #1
 8004f60:	440a      	add	r2, r1
 8004f62:	4291      	cmp	r1, r2
 8004f64:	d100      	bne.n	8004f68 <memcpy+0xc>
 8004f66:	bd10      	pop	{r4, pc}
 8004f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f70:	e7f7      	b.n	8004f62 <memcpy+0x6>

08004f72 <memset>:
 8004f72:	4402      	add	r2, r0
 8004f74:	4603      	mov	r3, r0
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d100      	bne.n	8004f7c <memset+0xa>
 8004f7a:	4770      	bx	lr
 8004f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f80:	e7f9      	b.n	8004f76 <memset+0x4>
	...

08004f84 <sinf>:
 8004f84:	ee10 3a10 	vmov	r3, s0
 8004f88:	b507      	push	{r0, r1, r2, lr}
 8004f8a:	4a1d      	ldr	r2, [pc, #116]	; (8005000 <sinf+0x7c>)
 8004f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	4293      	cmp	r3, r2
 8004f92:	dc05      	bgt.n	8004fa0 <sinf+0x1c>
 8004f94:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8005004 <sinf+0x80>
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f000 fc41 	bl	8005820 <__kernel_sinf>
 8004f9e:	e004      	b.n	8004faa <sinf+0x26>
 8004fa0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004fa4:	db04      	blt.n	8004fb0 <sinf+0x2c>
 8004fa6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004faa:	b003      	add	sp, #12
 8004fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fb0:	4668      	mov	r0, sp
 8004fb2:	f000 f829 	bl	8005008 <__ieee754_rem_pio2f>
 8004fb6:	f000 0003 	and.w	r0, r0, #3
 8004fba:	2801      	cmp	r0, #1
 8004fbc:	d008      	beq.n	8004fd0 <sinf+0x4c>
 8004fbe:	2802      	cmp	r0, #2
 8004fc0:	d00d      	beq.n	8004fde <sinf+0x5a>
 8004fc2:	b9b0      	cbnz	r0, 8004ff2 <sinf+0x6e>
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fca:	ed9d 0a00 	vldr	s0, [sp]
 8004fce:	e7e4      	b.n	8004f9a <sinf+0x16>
 8004fd0:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fd4:	ed9d 0a00 	vldr	s0, [sp]
 8004fd8:	f000 f942 	bl	8005260 <__kernel_cosf>
 8004fdc:	e7e5      	b.n	8004faa <sinf+0x26>
 8004fde:	2001      	movs	r0, #1
 8004fe0:	eddd 0a01 	vldr	s1, [sp, #4]
 8004fe4:	ed9d 0a00 	vldr	s0, [sp]
 8004fe8:	f000 fc1a 	bl	8005820 <__kernel_sinf>
 8004fec:	eeb1 0a40 	vneg.f32	s0, s0
 8004ff0:	e7db      	b.n	8004faa <sinf+0x26>
 8004ff2:	eddd 0a01 	vldr	s1, [sp, #4]
 8004ff6:	ed9d 0a00 	vldr	s0, [sp]
 8004ffa:	f000 f931 	bl	8005260 <__kernel_cosf>
 8004ffe:	e7f5      	b.n	8004fec <sinf+0x68>
 8005000:	3f490fd8 	.word	0x3f490fd8
 8005004:	00000000 	.word	0x00000000

08005008 <__ieee754_rem_pio2f>:
 8005008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500a:	ee10 6a10 	vmov	r6, s0
 800500e:	4b86      	ldr	r3, [pc, #536]	; (8005228 <__ieee754_rem_pio2f+0x220>)
 8005010:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8005014:	429c      	cmp	r4, r3
 8005016:	b087      	sub	sp, #28
 8005018:	4605      	mov	r5, r0
 800501a:	dc05      	bgt.n	8005028 <__ieee754_rem_pio2f+0x20>
 800501c:	2300      	movs	r3, #0
 800501e:	ed85 0a00 	vstr	s0, [r5]
 8005022:	6043      	str	r3, [r0, #4]
 8005024:	2000      	movs	r0, #0
 8005026:	e020      	b.n	800506a <__ieee754_rem_pio2f+0x62>
 8005028:	4b80      	ldr	r3, [pc, #512]	; (800522c <__ieee754_rem_pio2f+0x224>)
 800502a:	429c      	cmp	r4, r3
 800502c:	dc38      	bgt.n	80050a0 <__ieee754_rem_pio2f+0x98>
 800502e:	2e00      	cmp	r6, #0
 8005030:	f024 040f 	bic.w	r4, r4, #15
 8005034:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005230 <__ieee754_rem_pio2f+0x228>
 8005038:	4b7e      	ldr	r3, [pc, #504]	; (8005234 <__ieee754_rem_pio2f+0x22c>)
 800503a:	dd18      	ble.n	800506e <__ieee754_rem_pio2f+0x66>
 800503c:	429c      	cmp	r4, r3
 800503e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005042:	bf09      	itett	eq
 8005044:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8005238 <__ieee754_rem_pio2f+0x230>
 8005048:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800523c <__ieee754_rem_pio2f+0x234>
 800504c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005050:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005240 <__ieee754_rem_pio2f+0x238>
 8005054:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005058:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800505c:	edc0 6a00 	vstr	s13, [r0]
 8005060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005064:	edc0 7a01 	vstr	s15, [r0, #4]
 8005068:	2001      	movs	r0, #1
 800506a:	b007      	add	sp, #28
 800506c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800506e:	429c      	cmp	r4, r3
 8005070:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005074:	bf09      	itett	eq
 8005076:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8005238 <__ieee754_rem_pio2f+0x230>
 800507a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800523c <__ieee754_rem_pio2f+0x234>
 800507e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005082:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005240 <__ieee754_rem_pio2f+0x238>
 8005086:	ee77 6a87 	vadd.f32	s13, s15, s14
 800508a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800508e:	edc0 6a00 	vstr	s13, [r0]
 8005092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005096:	edc0 7a01 	vstr	s15, [r0, #4]
 800509a:	f04f 30ff 	mov.w	r0, #4294967295
 800509e:	e7e4      	b.n	800506a <__ieee754_rem_pio2f+0x62>
 80050a0:	4b68      	ldr	r3, [pc, #416]	; (8005244 <__ieee754_rem_pio2f+0x23c>)
 80050a2:	429c      	cmp	r4, r3
 80050a4:	dc71      	bgt.n	800518a <__ieee754_rem_pio2f+0x182>
 80050a6:	f000 fc03 	bl	80058b0 <fabsf>
 80050aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005248 <__ieee754_rem_pio2f+0x240>
 80050ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80050b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80050b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80050be:	ee17 0a90 	vmov	r0, s15
 80050c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005230 <__ieee754_rem_pio2f+0x228>
 80050c6:	eeb1 7a46 	vneg.f32	s14, s12
 80050ca:	eea7 0a27 	vfma.f32	s0, s14, s15
 80050ce:	281f      	cmp	r0, #31
 80050d0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800523c <__ieee754_rem_pio2f+0x234>
 80050d4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80050d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80050dc:	ee16 3a90 	vmov	r3, s13
 80050e0:	dc1c      	bgt.n	800511c <__ieee754_rem_pio2f+0x114>
 80050e2:	1e47      	subs	r7, r0, #1
 80050e4:	4959      	ldr	r1, [pc, #356]	; (800524c <__ieee754_rem_pio2f+0x244>)
 80050e6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80050ea:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 80050ee:	428a      	cmp	r2, r1
 80050f0:	d014      	beq.n	800511c <__ieee754_rem_pio2f+0x114>
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	ed95 7a00 	vldr	s14, [r5]
 80050f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005102:	ed85 0a01 	vstr	s0, [r5, #4]
 8005106:	dab0      	bge.n	800506a <__ieee754_rem_pio2f+0x62>
 8005108:	eeb1 7a47 	vneg.f32	s14, s14
 800510c:	eeb1 0a40 	vneg.f32	s0, s0
 8005110:	ed85 7a00 	vstr	s14, [r5]
 8005114:	ed85 0a01 	vstr	s0, [r5, #4]
 8005118:	4240      	negs	r0, r0
 800511a:	e7a6      	b.n	800506a <__ieee754_rem_pio2f+0x62>
 800511c:	15e4      	asrs	r4, r4, #23
 800511e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005122:	1aa2      	subs	r2, r4, r2
 8005124:	2a08      	cmp	r2, #8
 8005126:	dde4      	ble.n	80050f2 <__ieee754_rem_pio2f+0xea>
 8005128:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005238 <__ieee754_rem_pio2f+0x230>
 800512c:	eef0 6a40 	vmov.f32	s13, s0
 8005130:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005134:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005138:	eea7 0a27 	vfma.f32	s0, s14, s15
 800513c:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005240 <__ieee754_rem_pio2f+0x238>
 8005140:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8005144:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8005148:	eef0 7a40 	vmov.f32	s15, s0
 800514c:	ee15 3a90 	vmov	r3, s11
 8005150:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005154:	1aa4      	subs	r4, r4, r2
 8005156:	2c19      	cmp	r4, #25
 8005158:	dc04      	bgt.n	8005164 <__ieee754_rem_pio2f+0x15c>
 800515a:	edc5 5a00 	vstr	s11, [r5]
 800515e:	eeb0 0a66 	vmov.f32	s0, s13
 8005162:	e7c7      	b.n	80050f4 <__ieee754_rem_pio2f+0xec>
 8005164:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005250 <__ieee754_rem_pio2f+0x248>
 8005168:	eeb0 0a66 	vmov.f32	s0, s13
 800516c:	eea7 0a25 	vfma.f32	s0, s14, s11
 8005170:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005174:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005178:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005254 <__ieee754_rem_pio2f+0x24c>
 800517c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8005180:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005184:	ed85 7a00 	vstr	s14, [r5]
 8005188:	e7b4      	b.n	80050f4 <__ieee754_rem_pio2f+0xec>
 800518a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800518e:	db06      	blt.n	800519e <__ieee754_rem_pio2f+0x196>
 8005190:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005194:	edc0 7a01 	vstr	s15, [r0, #4]
 8005198:	edc0 7a00 	vstr	s15, [r0]
 800519c:	e742      	b.n	8005024 <__ieee754_rem_pio2f+0x1c>
 800519e:	15e2      	asrs	r2, r4, #23
 80051a0:	3a86      	subs	r2, #134	; 0x86
 80051a2:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80051ae:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005258 <__ieee754_rem_pio2f+0x250>
 80051b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 80051be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80051c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 80051d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80051d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80051da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051de:	edcd 7a05 	vstr	s15, [sp, #20]
 80051e2:	d11e      	bne.n	8005222 <__ieee754_rem_pio2f+0x21a>
 80051e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2302      	movne	r3, #2
 80051f2:	491a      	ldr	r1, [pc, #104]	; (800525c <__ieee754_rem_pio2f+0x254>)
 80051f4:	9101      	str	r1, [sp, #4]
 80051f6:	2102      	movs	r1, #2
 80051f8:	9100      	str	r1, [sp, #0]
 80051fa:	a803      	add	r0, sp, #12
 80051fc:	4629      	mov	r1, r5
 80051fe:	f000 f88d 	bl	800531c <__kernel_rem_pio2f>
 8005202:	2e00      	cmp	r6, #0
 8005204:	f6bf af31 	bge.w	800506a <__ieee754_rem_pio2f+0x62>
 8005208:	edd5 7a00 	vldr	s15, [r5]
 800520c:	eef1 7a67 	vneg.f32	s15, s15
 8005210:	edc5 7a00 	vstr	s15, [r5]
 8005214:	edd5 7a01 	vldr	s15, [r5, #4]
 8005218:	eef1 7a67 	vneg.f32	s15, s15
 800521c:	edc5 7a01 	vstr	s15, [r5, #4]
 8005220:	e77a      	b.n	8005118 <__ieee754_rem_pio2f+0x110>
 8005222:	2303      	movs	r3, #3
 8005224:	e7e5      	b.n	80051f2 <__ieee754_rem_pio2f+0x1ea>
 8005226:	bf00      	nop
 8005228:	3f490fd8 	.word	0x3f490fd8
 800522c:	4016cbe3 	.word	0x4016cbe3
 8005230:	3fc90f80 	.word	0x3fc90f80
 8005234:	3fc90fd0 	.word	0x3fc90fd0
 8005238:	37354400 	.word	0x37354400
 800523c:	37354443 	.word	0x37354443
 8005240:	2e85a308 	.word	0x2e85a308
 8005244:	43490f80 	.word	0x43490f80
 8005248:	3f22f984 	.word	0x3f22f984
 800524c:	08005a54 	.word	0x08005a54
 8005250:	2e85a300 	.word	0x2e85a300
 8005254:	248d3132 	.word	0x248d3132
 8005258:	43800000 	.word	0x43800000
 800525c:	08005ad4 	.word	0x08005ad4

08005260 <__kernel_cosf>:
 8005260:	ee10 3a10 	vmov	r3, s0
 8005264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005268:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800526c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005270:	da05      	bge.n	800527e <__kernel_cosf+0x1e>
 8005272:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005276:	ee17 2a90 	vmov	r2, s15
 800527a:	2a00      	cmp	r2, #0
 800527c:	d03b      	beq.n	80052f6 <__kernel_cosf+0x96>
 800527e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005282:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005286:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052fc <__kernel_cosf+0x9c>
 800528a:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <__kernel_cosf+0xa0>)
 800528c:	ee66 7a07 	vmul.f32	s15, s12, s14
 8005290:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005304 <__kernel_cosf+0xa4>
 8005294:	eea6 7a25 	vfma.f32	s14, s12, s11
 8005298:	4293      	cmp	r3, r2
 800529a:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8005308 <__kernel_cosf+0xa8>
 800529e:	eee7 5a06 	vfma.f32	s11, s14, s12
 80052a2:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800530c <__kernel_cosf+0xac>
 80052a6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80052aa:	eddf 5a19 	vldr	s11, [pc, #100]	; 8005310 <__kernel_cosf+0xb0>
 80052ae:	eee7 5a06 	vfma.f32	s11, s14, s12
 80052b2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005314 <__kernel_cosf+0xb4>
 80052b6:	eea5 7a86 	vfma.f32	s14, s11, s12
 80052ba:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80052be:	ee27 7a06 	vmul.f32	s14, s14, s12
 80052c2:	eee6 0a07 	vfma.f32	s1, s12, s14
 80052c6:	dc04      	bgt.n	80052d2 <__kernel_cosf+0x72>
 80052c8:	ee77 0ae0 	vsub.f32	s1, s15, s1
 80052cc:	ee36 0ae0 	vsub.f32	s0, s13, s1
 80052d0:	4770      	bx	lr
 80052d2:	4a11      	ldr	r2, [pc, #68]	; (8005318 <__kernel_cosf+0xb8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	bfda      	itte	le
 80052d8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80052dc:	ee07 3a10 	vmovle	s14, r3
 80052e0:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 80052e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80052e8:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80052ec:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80052f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80052f4:	4770      	bx	lr
 80052f6:	eeb0 0a66 	vmov.f32	s0, s13
 80052fa:	4770      	bx	lr
 80052fc:	ad47d74e 	.word	0xad47d74e
 8005300:	3e999999 	.word	0x3e999999
 8005304:	310f74f6 	.word	0x310f74f6
 8005308:	b493f27c 	.word	0xb493f27c
 800530c:	37d00d01 	.word	0x37d00d01
 8005310:	bab60b61 	.word	0xbab60b61
 8005314:	3d2aaaab 	.word	0x3d2aaaab
 8005318:	3f480000 	.word	0x3f480000

0800531c <__kernel_rem_pio2f>:
 800531c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005320:	ed2d 8b04 	vpush	{d8-d9}
 8005324:	b0d7      	sub	sp, #348	; 0x15c
 8005326:	469b      	mov	fp, r3
 8005328:	460e      	mov	r6, r1
 800532a:	4bbe      	ldr	r3, [pc, #760]	; (8005624 <__kernel_rem_pio2f+0x308>)
 800532c:	9964      	ldr	r1, [sp, #400]	; 0x190
 800532e:	9002      	str	r0, [sp, #8]
 8005330:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8005334:	9865      	ldr	r0, [sp, #404]	; 0x194
 8005336:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8005634 <__kernel_rem_pio2f+0x318>
 800533a:	1ed1      	subs	r1, r2, #3
 800533c:	2308      	movs	r3, #8
 800533e:	fb91 f1f3 	sdiv	r1, r1, r3
 8005342:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005346:	f10b 3aff 	add.w	sl, fp, #4294967295
 800534a:	1c4c      	adds	r4, r1, #1
 800534c:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8005350:	eba1 050a 	sub.w	r5, r1, sl
 8005354:	aa1a      	add	r2, sp, #104	; 0x68
 8005356:	eb09 070a 	add.w	r7, r9, sl
 800535a:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800535e:	4696      	mov	lr, r2
 8005360:	2300      	movs	r3, #0
 8005362:	42bb      	cmp	r3, r7
 8005364:	dd0f      	ble.n	8005386 <__kernel_rem_pio2f+0x6a>
 8005366:	af42      	add	r7, sp, #264	; 0x108
 8005368:	2200      	movs	r2, #0
 800536a:	454a      	cmp	r2, r9
 800536c:	dc27      	bgt.n	80053be <__kernel_rem_pio2f+0xa2>
 800536e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8005372:	eb0b 0302 	add.w	r3, fp, r2
 8005376:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800537a:	9d02      	ldr	r5, [sp, #8]
 800537c:	eddf 7aad 	vldr	s15, [pc, #692]	; 8005634 <__kernel_rem_pio2f+0x318>
 8005380:	f04f 0c00 	mov.w	ip, #0
 8005384:	e015      	b.n	80053b2 <__kernel_rem_pio2f+0x96>
 8005386:	42dd      	cmn	r5, r3
 8005388:	bf5d      	ittte	pl
 800538a:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800538e:	ee07 2a90 	vmovpl	s15, r2
 8005392:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005396:	eef0 7a47 	vmovmi.f32	s15, s14
 800539a:	ecee 7a01 	vstmia	lr!, {s15}
 800539e:	3301      	adds	r3, #1
 80053a0:	e7df      	b.n	8005362 <__kernel_rem_pio2f+0x46>
 80053a2:	ecf5 6a01 	vldmia	r5!, {s13}
 80053a6:	ed33 7a01 	vldmdb	r3!, {s14}
 80053aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80053ae:	f10c 0c01 	add.w	ip, ip, #1
 80053b2:	45d4      	cmp	ip, sl
 80053b4:	ddf5      	ble.n	80053a2 <__kernel_rem_pio2f+0x86>
 80053b6:	ece7 7a01 	vstmia	r7!, {s15}
 80053ba:	3201      	adds	r2, #1
 80053bc:	e7d5      	b.n	800536a <__kernel_rem_pio2f+0x4e>
 80053be:	ab06      	add	r3, sp, #24
 80053c0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8005630 <__kernel_rem_pio2f+0x314>
 80053ca:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800562c <__kernel_rem_pio2f+0x310>
 80053ce:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80053d2:	9303      	str	r3, [sp, #12]
 80053d4:	464d      	mov	r5, r9
 80053d6:	ab56      	add	r3, sp, #344	; 0x158
 80053d8:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 80053dc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80053e0:	3f01      	subs	r7, #1
 80053e2:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80053e6:	00bf      	lsls	r7, r7, #2
 80053e8:	ab56      	add	r3, sp, #344	; 0x158
 80053ea:	19da      	adds	r2, r3, r7
 80053ec:	3a4c      	subs	r2, #76	; 0x4c
 80053ee:	2300      	movs	r3, #0
 80053f0:	1ae9      	subs	r1, r5, r3
 80053f2:	2900      	cmp	r1, #0
 80053f4:	dc4c      	bgt.n	8005490 <__kernel_rem_pio2f+0x174>
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 faa4 	bl	8005944 <scalbnf>
 80053fc:	eeb0 8a40 	vmov.f32	s16, s0
 8005400:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005404:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005408:	f000 fa5a 	bl	80058c0 <floorf>
 800540c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005410:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005414:	2c00      	cmp	r4, #0
 8005416:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800541a:	edcd 7a01 	vstr	s15, [sp, #4]
 800541e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005422:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005426:	dd48      	ble.n	80054ba <__kernel_rem_pio2f+0x19e>
 8005428:	1e69      	subs	r1, r5, #1
 800542a:	ab06      	add	r3, sp, #24
 800542c:	f1c4 0008 	rsb	r0, r4, #8
 8005430:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8005434:	9a01      	ldr	r2, [sp, #4]
 8005436:	fa4c f300 	asr.w	r3, ip, r0
 800543a:	441a      	add	r2, r3
 800543c:	4083      	lsls	r3, r0
 800543e:	9201      	str	r2, [sp, #4]
 8005440:	ebac 0203 	sub.w	r2, ip, r3
 8005444:	ab06      	add	r3, sp, #24
 8005446:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800544a:	f1c4 0307 	rsb	r3, r4, #7
 800544e:	fa42 f803 	asr.w	r8, r2, r3
 8005452:	f1b8 0f00 	cmp.w	r8, #0
 8005456:	dd41      	ble.n	80054dc <__kernel_rem_pio2f+0x1c0>
 8005458:	9b01      	ldr	r3, [sp, #4]
 800545a:	2000      	movs	r0, #0
 800545c:	3301      	adds	r3, #1
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	4601      	mov	r1, r0
 8005462:	4285      	cmp	r5, r0
 8005464:	dc6d      	bgt.n	8005542 <__kernel_rem_pio2f+0x226>
 8005466:	2c00      	cmp	r4, #0
 8005468:	dd04      	ble.n	8005474 <__kernel_rem_pio2f+0x158>
 800546a:	2c01      	cmp	r4, #1
 800546c:	d07e      	beq.n	800556c <__kernel_rem_pio2f+0x250>
 800546e:	2c02      	cmp	r4, #2
 8005470:	f000 8086 	beq.w	8005580 <__kernel_rem_pio2f+0x264>
 8005474:	f1b8 0f02 	cmp.w	r8, #2
 8005478:	d130      	bne.n	80054dc <__kernel_rem_pio2f+0x1c0>
 800547a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800547e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005482:	b359      	cbz	r1, 80054dc <__kernel_rem_pio2f+0x1c0>
 8005484:	4620      	mov	r0, r4
 8005486:	f000 fa5d 	bl	8005944 <scalbnf>
 800548a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800548e:	e025      	b.n	80054dc <__kernel_rem_pio2f+0x1c0>
 8005490:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005494:	a806      	add	r0, sp, #24
 8005496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800549a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80054a2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80054a6:	ee10 1a10 	vmov	r1, s0
 80054aa:	ed32 0a01 	vldmdb	r2!, {s0}
 80054ae:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 80054b2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80054b6:	3301      	adds	r3, #1
 80054b8:	e79a      	b.n	80053f0 <__kernel_rem_pio2f+0xd4>
 80054ba:	d106      	bne.n	80054ca <__kernel_rem_pio2f+0x1ae>
 80054bc:	1e6b      	subs	r3, r5, #1
 80054be:	aa06      	add	r2, sp, #24
 80054c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054c4:	ea4f 2822 	mov.w	r8, r2, asr #8
 80054c8:	e7c3      	b.n	8005452 <__kernel_rem_pio2f+0x136>
 80054ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80054ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	da31      	bge.n	800553c <__kernel_rem_pio2f+0x220>
 80054d8:	f04f 0800 	mov.w	r8, #0
 80054dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80054e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e4:	f040 80a8 	bne.w	8005638 <__kernel_rem_pio2f+0x31c>
 80054e8:	1e6b      	subs	r3, r5, #1
 80054ea:	4618      	mov	r0, r3
 80054ec:	2200      	movs	r2, #0
 80054ee:	4548      	cmp	r0, r9
 80054f0:	da4d      	bge.n	800558e <__kernel_rem_pio2f+0x272>
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	f000 8087 	beq.w	8005606 <__kernel_rem_pio2f+0x2ea>
 80054f8:	aa06      	add	r2, sp, #24
 80054fa:	3c08      	subs	r4, #8
 80054fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005500:	2900      	cmp	r1, #0
 8005502:	f000 808d 	beq.w	8005620 <__kernel_rem_pio2f+0x304>
 8005506:	4620      	mov	r0, r4
 8005508:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800550c:	9302      	str	r3, [sp, #8]
 800550e:	f000 fa19 	bl	8005944 <scalbnf>
 8005512:	9b02      	ldr	r3, [sp, #8]
 8005514:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8005630 <__kernel_rem_pio2f+0x314>
 8005518:	0099      	lsls	r1, r3, #2
 800551a:	aa42      	add	r2, sp, #264	; 0x108
 800551c:	1850      	adds	r0, r2, r1
 800551e:	1d05      	adds	r5, r0, #4
 8005520:	461c      	mov	r4, r3
 8005522:	2c00      	cmp	r4, #0
 8005524:	f280 80b8 	bge.w	8005698 <__kernel_rem_pio2f+0x37c>
 8005528:	2500      	movs	r5, #0
 800552a:	1b5c      	subs	r4, r3, r5
 800552c:	2c00      	cmp	r4, #0
 800552e:	f2c0 80d8 	blt.w	80056e2 <__kernel_rem_pio2f+0x3c6>
 8005532:	4f3d      	ldr	r7, [pc, #244]	; (8005628 <__kernel_rem_pio2f+0x30c>)
 8005534:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8005634 <__kernel_rem_pio2f+0x318>
 8005538:	2400      	movs	r4, #0
 800553a:	e0c6      	b.n	80056ca <__kernel_rem_pio2f+0x3ae>
 800553c:	f04f 0802 	mov.w	r8, #2
 8005540:	e78a      	b.n	8005458 <__kernel_rem_pio2f+0x13c>
 8005542:	ab06      	add	r3, sp, #24
 8005544:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005548:	b949      	cbnz	r1, 800555e <__kernel_rem_pio2f+0x242>
 800554a:	b12b      	cbz	r3, 8005558 <__kernel_rem_pio2f+0x23c>
 800554c:	aa06      	add	r2, sp, #24
 800554e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005552:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005556:	2301      	movs	r3, #1
 8005558:	3001      	adds	r0, #1
 800555a:	4619      	mov	r1, r3
 800555c:	e781      	b.n	8005462 <__kernel_rem_pio2f+0x146>
 800555e:	aa06      	add	r2, sp, #24
 8005560:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8005564:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8005568:	460b      	mov	r3, r1
 800556a:	e7f5      	b.n	8005558 <__kernel_rem_pio2f+0x23c>
 800556c:	1e68      	subs	r0, r5, #1
 800556e:	ab06      	add	r3, sp, #24
 8005570:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005578:	aa06      	add	r2, sp, #24
 800557a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800557e:	e779      	b.n	8005474 <__kernel_rem_pio2f+0x158>
 8005580:	1e68      	subs	r0, r5, #1
 8005582:	ab06      	add	r3, sp, #24
 8005584:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8005588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558c:	e7f4      	b.n	8005578 <__kernel_rem_pio2f+0x25c>
 800558e:	a906      	add	r1, sp, #24
 8005590:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005594:	3801      	subs	r0, #1
 8005596:	430a      	orrs	r2, r1
 8005598:	e7a9      	b.n	80054ee <__kernel_rem_pio2f+0x1d2>
 800559a:	f10c 0c01 	add.w	ip, ip, #1
 800559e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	d0f9      	beq.n	800559a <__kernel_rem_pio2f+0x27e>
 80055a6:	eb0b 0305 	add.w	r3, fp, r5
 80055aa:	aa1a      	add	r2, sp, #104	; 0x68
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	1898      	adds	r0, r3, r2
 80055b0:	3004      	adds	r0, #4
 80055b2:	1c69      	adds	r1, r5, #1
 80055b4:	3704      	adds	r7, #4
 80055b6:	2200      	movs	r2, #0
 80055b8:	4465      	add	r5, ip
 80055ba:	9005      	str	r0, [sp, #20]
 80055bc:	428d      	cmp	r5, r1
 80055be:	f6ff af0a 	blt.w	80053d6 <__kernel_rem_pio2f+0xba>
 80055c2:	a81a      	add	r0, sp, #104	; 0x68
 80055c4:	eb02 0c03 	add.w	ip, r2, r3
 80055c8:	4484      	add	ip, r0
 80055ca:	9803      	ldr	r0, [sp, #12]
 80055cc:	f8dd e008 	ldr.w	lr, [sp, #8]
 80055d0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80055d4:	9001      	str	r0, [sp, #4]
 80055d6:	ee07 0a90 	vmov	s15, r0
 80055da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055de:	9805      	ldr	r0, [sp, #20]
 80055e0:	edcc 7a00 	vstr	s15, [ip]
 80055e4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8005634 <__kernel_rem_pio2f+0x318>
 80055e8:	eb00 0802 	add.w	r8, r0, r2
 80055ec:	f04f 0c00 	mov.w	ip, #0
 80055f0:	45d4      	cmp	ip, sl
 80055f2:	dd0c      	ble.n	800560e <__kernel_rem_pio2f+0x2f2>
 80055f4:	eb02 0c07 	add.w	ip, r2, r7
 80055f8:	a842      	add	r0, sp, #264	; 0x108
 80055fa:	4484      	add	ip, r0
 80055fc:	edcc 7a01 	vstr	s15, [ip, #4]
 8005600:	3101      	adds	r1, #1
 8005602:	3204      	adds	r2, #4
 8005604:	e7da      	b.n	80055bc <__kernel_rem_pio2f+0x2a0>
 8005606:	9b04      	ldr	r3, [sp, #16]
 8005608:	f04f 0c01 	mov.w	ip, #1
 800560c:	e7c7      	b.n	800559e <__kernel_rem_pio2f+0x282>
 800560e:	ecfe 6a01 	vldmia	lr!, {s13}
 8005612:	ed38 7a01 	vldmdb	r8!, {s14}
 8005616:	f10c 0c01 	add.w	ip, ip, #1
 800561a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800561e:	e7e7      	b.n	80055f0 <__kernel_rem_pio2f+0x2d4>
 8005620:	3b01      	subs	r3, #1
 8005622:	e769      	b.n	80054f8 <__kernel_rem_pio2f+0x1dc>
 8005624:	08005e18 	.word	0x08005e18
 8005628:	08005dec 	.word	0x08005dec
 800562c:	43800000 	.word	0x43800000
 8005630:	3b800000 	.word	0x3b800000
 8005634:	00000000 	.word	0x00000000
 8005638:	4260      	negs	r0, r4
 800563a:	eeb0 0a48 	vmov.f32	s0, s16
 800563e:	f000 f981 	bl	8005944 <scalbnf>
 8005642:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800562c <__kernel_rem_pio2f+0x310>
 8005646:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564e:	db1a      	blt.n	8005686 <__kernel_rem_pio2f+0x36a>
 8005650:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005630 <__kernel_rem_pio2f+0x314>
 8005654:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005658:	aa06      	add	r2, sp, #24
 800565a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800565e:	a906      	add	r1, sp, #24
 8005660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005664:	3408      	adds	r4, #8
 8005666:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800566a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800566e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005672:	ee10 3a10 	vmov	r3, s0
 8005676:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800567a:	1c6b      	adds	r3, r5, #1
 800567c:	ee17 2a90 	vmov	r2, s15
 8005680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005684:	e73f      	b.n	8005506 <__kernel_rem_pio2f+0x1ea>
 8005686:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800568a:	aa06      	add	r2, sp, #24
 800568c:	ee10 3a10 	vmov	r3, s0
 8005690:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8005694:	462b      	mov	r3, r5
 8005696:	e736      	b.n	8005506 <__kernel_rem_pio2f+0x1ea>
 8005698:	aa06      	add	r2, sp, #24
 800569a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800569e:	9202      	str	r2, [sp, #8]
 80056a0:	ee07 2a90 	vmov	s15, r2
 80056a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a8:	3c01      	subs	r4, #1
 80056aa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80056ae:	ee20 0a07 	vmul.f32	s0, s0, s14
 80056b2:	ed65 7a01 	vstmdb	r5!, {s15}
 80056b6:	e734      	b.n	8005522 <__kernel_rem_pio2f+0x206>
 80056b8:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 80056bc:	ecf7 6a01 	vldmia	r7!, {s13}
 80056c0:	ed9c 7a00 	vldr	s14, [ip]
 80056c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80056c8:	3401      	adds	r4, #1
 80056ca:	454c      	cmp	r4, r9
 80056cc:	dc01      	bgt.n	80056d2 <__kernel_rem_pio2f+0x3b6>
 80056ce:	42a5      	cmp	r5, r4
 80056d0:	daf2      	bge.n	80056b8 <__kernel_rem_pio2f+0x39c>
 80056d2:	aa56      	add	r2, sp, #344	; 0x158
 80056d4:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 80056d8:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 80056dc:	3501      	adds	r5, #1
 80056de:	3804      	subs	r0, #4
 80056e0:	e723      	b.n	800552a <__kernel_rem_pio2f+0x20e>
 80056e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80056e4:	2a03      	cmp	r2, #3
 80056e6:	d84d      	bhi.n	8005784 <__kernel_rem_pio2f+0x468>
 80056e8:	e8df f002 	tbb	[pc, r2]
 80056ec:	021f1f3e 	.word	0x021f1f3e
 80056f0:	aa56      	add	r2, sp, #344	; 0x158
 80056f2:	4411      	add	r1, r2
 80056f4:	399c      	subs	r1, #156	; 0x9c
 80056f6:	4608      	mov	r0, r1
 80056f8:	461c      	mov	r4, r3
 80056fa:	2c00      	cmp	r4, #0
 80056fc:	dc5f      	bgt.n	80057be <__kernel_rem_pio2f+0x4a2>
 80056fe:	4608      	mov	r0, r1
 8005700:	461c      	mov	r4, r3
 8005702:	2c01      	cmp	r4, #1
 8005704:	dc6b      	bgt.n	80057de <__kernel_rem_pio2f+0x4c2>
 8005706:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8005634 <__kernel_rem_pio2f+0x318>
 800570a:	2b01      	cmp	r3, #1
 800570c:	dc77      	bgt.n	80057fe <__kernel_rem_pio2f+0x4e2>
 800570e:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005712:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	d176      	bne.n	800580a <__kernel_rem_pio2f+0x4ee>
 800571c:	edc6 6a00 	vstr	s13, [r6]
 8005720:	ed86 7a01 	vstr	s14, [r6, #4]
 8005724:	edc6 7a02 	vstr	s15, [r6, #8]
 8005728:	e02c      	b.n	8005784 <__kernel_rem_pio2f+0x468>
 800572a:	aa56      	add	r2, sp, #344	; 0x158
 800572c:	4411      	add	r1, r2
 800572e:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8005634 <__kernel_rem_pio2f+0x318>
 8005732:	399c      	subs	r1, #156	; 0x9c
 8005734:	4618      	mov	r0, r3
 8005736:	2800      	cmp	r0, #0
 8005738:	da32      	bge.n	80057a0 <__kernel_rem_pio2f+0x484>
 800573a:	f1b8 0f00 	cmp.w	r8, #0
 800573e:	d035      	beq.n	80057ac <__kernel_rem_pio2f+0x490>
 8005740:	eef1 7a47 	vneg.f32	s15, s14
 8005744:	edc6 7a00 	vstr	s15, [r6]
 8005748:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800574c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005750:	a82f      	add	r0, sp, #188	; 0xbc
 8005752:	2101      	movs	r1, #1
 8005754:	428b      	cmp	r3, r1
 8005756:	da2c      	bge.n	80057b2 <__kernel_rem_pio2f+0x496>
 8005758:	f1b8 0f00 	cmp.w	r8, #0
 800575c:	d001      	beq.n	8005762 <__kernel_rem_pio2f+0x446>
 800575e:	eef1 7a67 	vneg.f32	s15, s15
 8005762:	edc6 7a01 	vstr	s15, [r6, #4]
 8005766:	e00d      	b.n	8005784 <__kernel_rem_pio2f+0x468>
 8005768:	aa56      	add	r2, sp, #344	; 0x158
 800576a:	4411      	add	r1, r2
 800576c:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8005634 <__kernel_rem_pio2f+0x318>
 8005770:	399c      	subs	r1, #156	; 0x9c
 8005772:	2b00      	cmp	r3, #0
 8005774:	da0e      	bge.n	8005794 <__kernel_rem_pio2f+0x478>
 8005776:	f1b8 0f00 	cmp.w	r8, #0
 800577a:	d001      	beq.n	8005780 <__kernel_rem_pio2f+0x464>
 800577c:	eef1 7a67 	vneg.f32	s15, s15
 8005780:	edc6 7a00 	vstr	s15, [r6]
 8005784:	9b01      	ldr	r3, [sp, #4]
 8005786:	f003 0007 	and.w	r0, r3, #7
 800578a:	b057      	add	sp, #348	; 0x15c
 800578c:	ecbd 8b04 	vpop	{d8-d9}
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	ed31 7a01 	vldmdb	r1!, {s14}
 8005798:	3b01      	subs	r3, #1
 800579a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800579e:	e7e8      	b.n	8005772 <__kernel_rem_pio2f+0x456>
 80057a0:	ed71 7a01 	vldmdb	r1!, {s15}
 80057a4:	3801      	subs	r0, #1
 80057a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057aa:	e7c4      	b.n	8005736 <__kernel_rem_pio2f+0x41a>
 80057ac:	eef0 7a47 	vmov.f32	s15, s14
 80057b0:	e7c8      	b.n	8005744 <__kernel_rem_pio2f+0x428>
 80057b2:	ecb0 7a01 	vldmia	r0!, {s14}
 80057b6:	3101      	adds	r1, #1
 80057b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057bc:	e7ca      	b.n	8005754 <__kernel_rem_pio2f+0x438>
 80057be:	ed50 7a02 	vldr	s15, [r0, #-8]
 80057c2:	ed70 6a01 	vldmdb	r0!, {s13}
 80057c6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80057ca:	3c01      	subs	r4, #1
 80057cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057d0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80057d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d8:	edc0 7a00 	vstr	s15, [r0]
 80057dc:	e78d      	b.n	80056fa <__kernel_rem_pio2f+0x3de>
 80057de:	ed50 7a02 	vldr	s15, [r0, #-8]
 80057e2:	ed70 6a01 	vldmdb	r0!, {s13}
 80057e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80057ea:	3c01      	subs	r4, #1
 80057ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057f0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80057f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f8:	edc0 7a00 	vstr	s15, [r0]
 80057fc:	e781      	b.n	8005702 <__kernel_rem_pio2f+0x3e6>
 80057fe:	ed31 7a01 	vldmdb	r1!, {s14}
 8005802:	3b01      	subs	r3, #1
 8005804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005808:	e77f      	b.n	800570a <__kernel_rem_pio2f+0x3ee>
 800580a:	eef1 6a66 	vneg.f32	s13, s13
 800580e:	eeb1 7a47 	vneg.f32	s14, s14
 8005812:	edc6 6a00 	vstr	s13, [r6]
 8005816:	ed86 7a01 	vstr	s14, [r6, #4]
 800581a:	eef1 7a67 	vneg.f32	s15, s15
 800581e:	e781      	b.n	8005724 <__kernel_rem_pio2f+0x408>

08005820 <__kernel_sinf>:
 8005820:	ee10 3a10 	vmov	r3, s0
 8005824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005828:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800582c:	da04      	bge.n	8005838 <__kernel_sinf+0x18>
 800582e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005832:	ee17 3a90 	vmov	r3, s15
 8005836:	b35b      	cbz	r3, 8005890 <__kernel_sinf+0x70>
 8005838:	ee20 7a00 	vmul.f32	s14, s0, s0
 800583c:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005894 <__kernel_sinf+0x74>
 8005840:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005898 <__kernel_sinf+0x78>
 8005844:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005848:	eddf 7a14 	vldr	s15, [pc, #80]	; 800589c <__kernel_sinf+0x7c>
 800584c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005850:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80058a0 <__kernel_sinf+0x80>
 8005854:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005858:	eddf 7a12 	vldr	s15, [pc, #72]	; 80058a4 <__kernel_sinf+0x84>
 800585c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005860:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005864:	b930      	cbnz	r0, 8005874 <__kernel_sinf+0x54>
 8005866:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80058a8 <__kernel_sinf+0x88>
 800586a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800586e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005872:	4770      	bx	lr
 8005874:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005878:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800587c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005880:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005884:	eddf 7a09 	vldr	s15, [pc, #36]	; 80058ac <__kernel_sinf+0x8c>
 8005888:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800588c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2f2ec9d3 	.word	0x2f2ec9d3
 8005898:	b2d72f34 	.word	0xb2d72f34
 800589c:	3638ef1b 	.word	0x3638ef1b
 80058a0:	b9500d01 	.word	0xb9500d01
 80058a4:	3c088889 	.word	0x3c088889
 80058a8:	be2aaaab 	.word	0xbe2aaaab
 80058ac:	3e2aaaab 	.word	0x3e2aaaab

080058b0 <fabsf>:
 80058b0:	ee10 3a10 	vmov	r3, s0
 80058b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058b8:	ee00 3a10 	vmov	s0, r3
 80058bc:	4770      	bx	lr
	...

080058c0 <floorf>:
 80058c0:	ee10 3a10 	vmov	r3, s0
 80058c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80058c8:	0dca      	lsrs	r2, r1, #23
 80058ca:	3a7f      	subs	r2, #127	; 0x7f
 80058cc:	2a16      	cmp	r2, #22
 80058ce:	dc2a      	bgt.n	8005926 <floorf+0x66>
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	da11      	bge.n	80058f8 <floorf+0x38>
 80058d4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005938 <floorf+0x78>
 80058d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80058e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e4:	dd05      	ble.n	80058f2 <floorf+0x32>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	da23      	bge.n	8005932 <floorf+0x72>
 80058ea:	4a14      	ldr	r2, [pc, #80]	; (800593c <floorf+0x7c>)
 80058ec:	2900      	cmp	r1, #0
 80058ee:	bf18      	it	ne
 80058f0:	4613      	movne	r3, r2
 80058f2:	ee00 3a10 	vmov	s0, r3
 80058f6:	4770      	bx	lr
 80058f8:	4911      	ldr	r1, [pc, #68]	; (8005940 <floorf+0x80>)
 80058fa:	4111      	asrs	r1, r2
 80058fc:	420b      	tst	r3, r1
 80058fe:	d0fa      	beq.n	80058f6 <floorf+0x36>
 8005900:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005938 <floorf+0x78>
 8005904:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005908:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800590c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005910:	ddef      	ble.n	80058f2 <floorf+0x32>
 8005912:	2b00      	cmp	r3, #0
 8005914:	bfbe      	ittt	lt
 8005916:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800591a:	fa40 f202 	asrlt.w	r2, r0, r2
 800591e:	189b      	addlt	r3, r3, r2
 8005920:	ea23 0301 	bic.w	r3, r3, r1
 8005924:	e7e5      	b.n	80058f2 <floorf+0x32>
 8005926:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800592a:	d3e4      	bcc.n	80058f6 <floorf+0x36>
 800592c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005930:	4770      	bx	lr
 8005932:	2300      	movs	r3, #0
 8005934:	e7dd      	b.n	80058f2 <floorf+0x32>
 8005936:	bf00      	nop
 8005938:	7149f2ca 	.word	0x7149f2ca
 800593c:	bf800000 	.word	0xbf800000
 8005940:	007fffff 	.word	0x007fffff

08005944 <scalbnf>:
 8005944:	b508      	push	{r3, lr}
 8005946:	ee10 2a10 	vmov	r2, s0
 800594a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800594e:	ed2d 8b02 	vpush	{d8}
 8005952:	eef0 0a40 	vmov.f32	s1, s0
 8005956:	d004      	beq.n	8005962 <scalbnf+0x1e>
 8005958:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800595c:	d306      	bcc.n	800596c <scalbnf+0x28>
 800595e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8005962:	ecbd 8b02 	vpop	{d8}
 8005966:	eeb0 0a60 	vmov.f32	s0, s1
 800596a:	bd08      	pop	{r3, pc}
 800596c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005970:	d21c      	bcs.n	80059ac <scalbnf+0x68>
 8005972:	4b1f      	ldr	r3, [pc, #124]	; (80059f0 <scalbnf+0xac>)
 8005974:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80059f4 <scalbnf+0xb0>
 8005978:	4298      	cmp	r0, r3
 800597a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800597e:	db10      	blt.n	80059a2 <scalbnf+0x5e>
 8005980:	ee10 2a90 	vmov	r2, s1
 8005984:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8005988:	3b19      	subs	r3, #25
 800598a:	4403      	add	r3, r0
 800598c:	2bfe      	cmp	r3, #254	; 0xfe
 800598e:	dd0f      	ble.n	80059b0 <scalbnf+0x6c>
 8005990:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80059f8 <scalbnf+0xb4>
 8005994:	eeb0 0a48 	vmov.f32	s0, s16
 8005998:	f000 f834 	bl	8005a04 <copysignf>
 800599c:	ee60 0a08 	vmul.f32	s1, s0, s16
 80059a0:	e7df      	b.n	8005962 <scalbnf+0x1e>
 80059a2:	eddf 7a16 	vldr	s15, [pc, #88]	; 80059fc <scalbnf+0xb8>
 80059a6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80059aa:	e7da      	b.n	8005962 <scalbnf+0x1e>
 80059ac:	0ddb      	lsrs	r3, r3, #23
 80059ae:	e7ec      	b.n	800598a <scalbnf+0x46>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	dd06      	ble.n	80059c2 <scalbnf+0x7e>
 80059b4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80059b8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80059bc:	ee00 3a90 	vmov	s1, r3
 80059c0:	e7cf      	b.n	8005962 <scalbnf+0x1e>
 80059c2:	f113 0f16 	cmn.w	r3, #22
 80059c6:	da06      	bge.n	80059d6 <scalbnf+0x92>
 80059c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80059cc:	4298      	cmp	r0, r3
 80059ce:	dcdf      	bgt.n	8005990 <scalbnf+0x4c>
 80059d0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80059fc <scalbnf+0xb8>
 80059d4:	e7de      	b.n	8005994 <scalbnf+0x50>
 80059d6:	3319      	adds	r3, #25
 80059d8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80059dc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80059e0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005a00 <scalbnf+0xbc>
 80059e4:	ee07 3a10 	vmov	s14, r3
 80059e8:	ee67 0a27 	vmul.f32	s1, s14, s15
 80059ec:	e7b9      	b.n	8005962 <scalbnf+0x1e>
 80059ee:	bf00      	nop
 80059f0:	ffff3cb0 	.word	0xffff3cb0
 80059f4:	4c000000 	.word	0x4c000000
 80059f8:	7149f2ca 	.word	0x7149f2ca
 80059fc:	0da24260 	.word	0x0da24260
 8005a00:	33000000 	.word	0x33000000

08005a04 <copysignf>:
 8005a04:	ee10 3a10 	vmov	r3, s0
 8005a08:	ee10 2a90 	vmov	r2, s1
 8005a0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005a14:	4313      	orrs	r3, r2
 8005a16:	ee00 3a10 	vmov	s0, r3
 8005a1a:	4770      	bx	lr

08005a1c <_init>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	bf00      	nop
 8005a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a22:	bc08      	pop	{r3}
 8005a24:	469e      	mov	lr, r3
 8005a26:	4770      	bx	lr

08005a28 <_fini>:
 8005a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2a:	bf00      	nop
 8005a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2e:	bc08      	pop	{r3}
 8005a30:	469e      	mov	lr, r3
 8005a32:	4770      	bx	lr
